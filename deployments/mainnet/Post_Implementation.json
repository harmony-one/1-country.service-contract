{
  "address": "0xeD0779174C1445DC675ee0F22A6FBB010bffccd4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Post.PostInfo",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "NewPostAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Post.PostInfo",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "PostDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURL",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURL",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "nameSpace",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PostUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        }
      ],
      "name": "addNewPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_postIds",
          "type": "uint256[]"
        }
      ],
      "name": "deletePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "postCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Post.PostInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPostDeleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nameSpace",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        }
      ],
      "name": "setDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllNameSpace",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        }
      ],
      "name": "trasnferPostOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newURL",
          "type": "string"
        }
      ],
      "name": "updatePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d8f594beb504e46efe0888f98e19f641baa35b18248db7aca52bb1a128f07c7",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0xeD0779174C1445DC675ee0F22A6FBB010bffccd4",
    "transactionIndex": 0,
    "gasUsed": "3849000",
    "logsBloom": "0x
    "blockHash": "0xe585358ab9459aa0c3d8a4aff939c6a773ff8c17477598a49eb7c6d9cd6982eb",
    "transactionHash": "0x8d8f594beb504e46efe0888f98e19f641baa35b18248db7aca52bb1a128f07c7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 41243998,
        "transactionHash": "0x8d8f594beb504e46efe0888f98e19f641baa35b18248db7aca52bb1a128f07c7",
        "address": "0xeD0779174C1445DC675ee0F22A6FBB010bffccd4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xe585358ab9459aa0c3d8a4aff939c6a773ff8c17477598a49eb7c6d9cd6982eb"
      }
    ],
    "blockNumber": 41243998,
    "cumulativeGasUsed": "3849000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a9ff065cb1431fbd276406a1c8158848",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Post.PostInfo\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"NewPostAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Post.PostInfo\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"PostDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"}],\"name\":\"addNewPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_postIds\",\"type\":\"uint256[]\"}],\"name\":\"deletePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Post.PostInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPostDeleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"}],\"name\":\"setDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllNameSpace\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"}],\"name\":\"trasnferPostOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newURL\",\"type\":\"string\"}],\"name\":\"updatePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewPost(string,string[],string)\":{\"details\":\"All posts have the same name space\",\"params\":{\"_name\":\"domain name\",\"_nameSpace\":\"name space of the post\",\"_urls\":\"URL list of the post\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deletePost(string,uint256[])\":{\"details\":\"Deleting the posts is available regardless the domain expiration\",\"params\":{\"_name\":\"domain name\",\"_postIds\":\"postId list to delete\"}},\"getPostCount(string)\":{\"params\":{\"_name\":\"domain name\"}},\"getPosts(string)\":{\"params\":{\"_name\":\"domain name\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDCAddress(address)\":{\"params\":{\"_dc\":\"DC contract address\"}},\"setRevenueAccount(address)\":{\"params\":{\"_revenueAccount\":\"revenue account address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"trasnferPostOwnership(string,address,bool,string)\":{\"params\":{\"_isAllNameSpace\":\"indicate whether posts in all name spaces should be transferred or not\",\"_name\":\"domain name to transfer posts\",\"_nameSpace\":\"name space of the posts to trasnfer, available only if _isAllNameSpace = false\",\"_receiver\":\"address to receive the posts\"}},\"updatePost(string,uint256,string)\":{\"details\":\"Updating the posts is not available after the domain is expired\",\"params\":{\"_name\":\"domain name\",\"_newURL\":\"new URL address of the post\",\"_postId\":\"postId of the post\"}},\"withdraw()\":{\"details\":\"Only owner of the revenue account can withdraw funds\"}},\"stateVariables\":{\"dc\":{\"details\":\"DC contract\"},\"isPostDeleted\":{\"details\":\"DC TokenId -> PostId -> Bool\"},\"posts\":{\"details\":\"DC TokenId -> PostInfo list\"},\"revenueAccount\":{\"details\":\"Fee withdrawal address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewPost(string,string[],string)\":{\"notice\":\"Add a new posts\"},\"deletePost(string,uint256[])\":{\"notice\":\"Delete the existing posts\"},\"getPostCount(string)\":{\"notice\":\"Returns the number of valid posts registered in the specific domain\"},\"getPosts(string)\":{\"notice\":\"Returns all the valid posts registered in the specific domain\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setDCAddress(address)\":{\"notice\":\"Set the DC contract address\"},\"setRevenueAccount(address)\":{\"notice\":\"Set the revenue account\"},\"trasnferPostOwnership(string,address,bool,string)\":{\"notice\":\"Transfer the post to another address\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"updatePost(string,uint256,string)\":{\"notice\":\"Update the existing post\"},\"withdraw()\":{\"notice\":\"Withdraw funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Post.sol\":\"Post\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Post.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDC.sol\\\";\\n\\ncontract Post is OwnableUpgradeable, PausableUpgradeable {\\n    struct PostInfo {\\n        uint256 postId; // starts from 0\\n        string url;\\n        string nameSpace;\\n        address owner;\\n    }\\n\\n    /// @dev DC contract\\n    address public dc;\\n\\n    /// @dev DC TokenId -> PostInfo list\\n    mapping(bytes32 => PostInfo[]) public posts;\\n\\n    /// @dev DC TokenId -> PostId -> Bool\\n    mapping(bytes32 => mapping(uint256 => bool)) public isPostDeleted;\\n\\n    /// @dev Fee withdrawal address\\n    address public revenueAccount;\\n\\n    event NewPostAdded(address indexed by, string indexed name, PostInfo post);\\n    event PostDeleted(address indexed by, string indexed name, PostInfo post);\\n    event PostUpdated(\\n        address by,\\n        string indexed name,\\n        uint256 indexed postId,\\n        string oldURL,\\n        string newURL,\\n        string indexed nameSpace,\\n        address owner\\n    );\\n    event RevenueAccountChanged(address indexed from, address indexed to);\\n\\n    modifier onlyDCOwner(string memory _name) {\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n        require(msg.sender == dcOwner, \\\"Post: only DC owner\\\");\\n        _;\\n    }\\n\\n    modifier whenDomainNotExpired(string memory _name) {\\n        uint256 domainExpireAt = IDC(dc).nameExpires(_name);\\n        require(block.timestamp < domainExpireAt, \\\"Post: expired domain\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _dc, address _revenueAccount) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n\\n        require(_dc != address(0), \\\"Post: zero address\\\");\\n\\n        dc = _dc;\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Set the DC contract address\\n    /// @param _dc DC contract address\\n    function setDCAddress(address _dc) external onlyOwner {\\n        dc = _dc;\\n    }\\n\\n    /// @notice Set the revenue account\\n    /// @param _revenueAccount revenue account address\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Add a new posts\\n    /// @dev All posts have the same name space\\n    /// @param _name domain name\\n    /// @param _urls URL list of the post\\n    /// @param _nameSpace name space of the post\\n    function addNewPost(\\n        string calldata _name,\\n        string[] calldata _urls,\\n        string calldata _nameSpace\\n    ) external payable whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        require(bytes(_nameSpace).length <= 1024, \\\"Post: alias too long\\\");\\n\\n        uint256 nextPostId = posts[tokenId].length;\\n        for (uint256 i = 0; i < _urls.length; ) {\\n            string memory url = _urls[i];\\n\\n            require(bytes(url).length <= 1024, \\\"Post: url too long\\\");\\n            require(bytes(url).length != 0, \\\"Post: empty url\\\");\\n\\n            // set a new post\\n            address domainOwner = msg.sender;\\n            PostInfo memory postInfo = PostInfo({\\n                postId: nextPostId,\\n                url: url,\\n                nameSpace: _nameSpace,\\n                owner: domainOwner\\n            });\\n            posts[tokenId].push(postInfo);\\n\\n            // incrase the next post Id\\n            ++nextPostId;\\n\\n            emit NewPostAdded(msg.sender, _name, postInfo);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Delete the existing posts\\n    /// @dev Deleting the posts is available regardless the domain expiration\\n    /// @param _name domain name\\n    /// @param _postIds postId list to delete\\n    function deletePost(string calldata _name, uint256[] calldata _postIds) external whenNotPaused onlyDCOwner(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address domainOwner = msg.sender;\\n\\n        for (uint256 i = 0; i < _postIds.length; ) {\\n            uint256 postId = _postIds[i];\\n            PostInfo memory post = posts[tokenId][postId];\\n\\n            require(post.owner == domainOwner, \\\"Post: only post owner\\\");\\n\\n            isPostDeleted[tokenId][postId] = true;\\n\\n            emit PostDeleted(msg.sender, _name, post);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Update the existing post\\n    /// @dev Updating the posts is not available after the domain is expired\\n    /// @param _name domain name\\n    /// @param _postId postId of the post\\n    /// @param _newURL new URL address of the post\\n    function updatePost(\\n        string calldata _name,\\n        uint256 _postId,\\n        string calldata _newURL\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        require(_postId < posts[tokenId].length, \\\"Post: invalid post Id\\\");\\n\\n        PostInfo memory postInfo = posts[tokenId][_postId];\\n        address domainOwner = msg.sender;\\n\\n        require(bytes(_newURL).length <= 1024, \\\"Post: url too long\\\");\\n        require(bytes(_newURL).length != 0, \\\"Post: empty url\\\");\\n        require(postInfo.owner == domainOwner, \\\"Post: only post owner\\\");\\n        require(!isPostDeleted[tokenId][_postId], \\\"Post: not exist\\\");\\n\\n        emit PostUpdated(msg.sender, _name, _postId, postInfo.url, _newURL, postInfo.nameSpace, domainOwner);\\n\\n        // update the post\\n        posts[tokenId][_postId].url = _newURL;\\n    }\\n\\n    /// @notice Transfer the post to another address\\n    /// @param _name domain name to transfer posts\\n    /// @param _receiver address to receive the posts\\n    /// @param _isAllNameSpace indicate whether posts in all name spaces should be transferred or not\\n    /// @param _nameSpace name space of the posts to trasnfer, available only if _isAllNameSpace = false\\n    function trasnferPostOwnership(\\n        string calldata _name,\\n        address _receiver,\\n        bool _isAllNameSpace,\\n        string calldata _nameSpace\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address sender = msg.sender;\\n\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                // transfer the post ownership\\n                PostInfo memory postInfo = posts[tokenId][i];\\n\\n                if (postInfo.owner == sender) {\\n                    if (\\n                        _isAllNameSpace ||\\n                        keccak256(abi.encodePacked(postInfo.nameSpace)) == keccak256(abi.encodePacked(_nameSpace))\\n                    ) {\\n                        posts[tokenId][i].owner = _receiver;\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns all the valid posts registered in the specific domain\\n    /// @param _name domain name\\n    function getPosts(string calldata _name) external view returns (PostInfo[] memory) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        uint256 postCount = getPostCount(_name);\\n\\n        PostInfo[] memory postList = new PostInfo[](postCount);\\n        uint256 postIndex = 0;\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                postList[postIndex++] = posts[tokenId][i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return postList;\\n    }\\n\\n    /// @notice Returns the number of valid posts registered in the specific domain\\n    /// @param _name domain name\\n    function getPostCount(string calldata _name) public view returns (uint256 postCount) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                ++postCount;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw funds\\n    /// @dev Only owner of the revenue account can withdraw funds\\n    function withdraw() external {\\n        require(msg.sender == owner() || msg.sender == revenueAccount, \\\"Post: must be owner or revenue account\\\");\\n        (bool success, ) = revenueAccount.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Post: failed to withdraw\\\");\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xb6b9210bf92ee9a8943ae18d5190c0277aeaf4e8c923c247ac0cadd23234d345\",\"license\":\"MIT\"},\"contracts/interfaces/IDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDC {\\n    function available(string memory) external view returns (bool);\\n\\n    function duration() external view returns (uint256);\\n\\n    function nameExpires(string calldata) external view returns (uint256);\\n\\n    function ownerOf(string calldata name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdbc63234084061220638d43cbb76f114dd1b1737b4b531c84b3156a57db32e88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d3565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000176565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620000ed5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e49190620001b6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015e602783620000ef565b91506200016b8262000100565b604082019050919050565b6000602082019050818103600083015262000191816200014f565b9050919050565b600060ff82169050919050565b620001b08162000198565b82525050565b6000602082019050620001cd6000830184620001a5565b92915050565b61446480620001e36000396000f3fe60806040526004361061011f5760003560e01c80638456cb59116100a0578063d8a531a611610064578063d8a531a614610362578063da5d29461461038d578063ecf611f8146103cd578063f2fde38b1461040a578063f5dc7d56146104335761011f565b80638456cb59146102a55780638da5cb5b146102bc578063948d59f9146102e7578063bb8d3d7d14610310578063cf2827d1146103395761011f565b8063485cc955116100e7578063485cc955146101e157806351f5f5a21461020a5780635c975abb14610247578063715018a6146102725780637c53911b146102895761011f565b806312a9abec146101245780632148fa261461014d57806330027f3b1461018a5780633ccfd60b146101b35780633f4ba83a146101ca575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612bf8565b61045e565b005b34801561015957600080fd5b50610174600480360381019061016f9190612c8a565b6104aa565b6040516101819190612cf0565b60405180910390f35b34801561019657600080fd5b506101b160048036038101906101ac9190612bf8565b61053e565b005b3480156101bf57600080fd5b506101c8610606565b005b3480156101d657600080fd5b506101df6107a4565b005b3480156101ed57600080fd5b5061020860048036038101906102039190612d0b565b6107b6565b005b34801561021657600080fd5b50610231600480360381019061022c9190612dad565b6109ef565b60405161023e9190612e08565b60405180910390f35b34801561025357600080fd5b5061025c610a1e565b6040516102699190612e08565b60405180910390f35b34801561027e57600080fd5b50610287610a35565b005b6102a3600480360381019061029e9190612e79565b610a49565b005b3480156102b157600080fd5b506102ba61101d565b005b3480156102c857600080fd5b506102d161102f565b6040516102de9190612f3c565b60405180910390f35b3480156102f357600080fd5b5061030e60048036038101906103099190612fad565b611059565b005b34801561031c57600080fd5b506103376004803603810190610332919061305a565b6114f4565b005b34801561034557600080fd5b50610360600480360381019061035b9190613101565b611ae0565b005b34801561036e57600080fd5b506103776121dd565b6040516103849190612f3c565b60405180910390f35b34801561039957600080fd5b506103b460048036038101906103af9190612dad565b612203565b6040516103c49493929190613226565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190612c8a565b612380565b604051610401919061340d565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612bf8565b612662565b005b34801561043f57600080fd5b506104486126e5565b6040516104559190612f3c565b60405180910390f35b61046661270b565b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008083836040516104bd92919061346e565b6040518091039020905060005b60986000838152602001908152602001600020805490508110156105365760996000838152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1661052b5782610528906134b6565b92505b8060010190506104ca565b505092915050565b61054661270b565b8073ffffffffffffffffffffffffffffffffffffffff16609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730760405160405180910390a380609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61060e61102f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106945750609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca90613570565b60405180910390fd5b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161071b906135b6565b60006040518083038185875af1925050503d8060008114610758576040519150601f19603f3d011682016040523d82523d6000602084013e61075d565b606091505b50509050806107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890613617565b60405180910390fd5b50565b6107ac61270b565b6107b4612789565b565b60008060019054906101000a900460ff161590508080156107e75750600160008054906101000a900460ff1660ff16105b8061081457506107f6306127ec565b1580156108135750600160008054906101000a900460ff1660ff16145b5b610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a906136a9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610890576001600060016101000a81548160ff0219169083151502179055505b61089861280f565b6108a0612868565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690613715565b60405180910390fd5b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156109ea5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109e19190613787565b60405180910390a15b505050565b60996020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000606560009054906101000a900460ff16905090565b610a3d61270b565b610a4760006128c1565b565b610a51612987565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b8152600401610af391906137a2565b602060405180830381865afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3491906137d9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90613852565b60405180910390fd5b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b8152600401610c4691906137a2565b602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190613887565b9050804210610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290613900565b60405180910390fd5b60008a8a604051610cdd92919061346e565b60405180910390209050610400878790501115610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d269061396c565b60405180910390fd5b60006098600083815260200190815260200160002080549050905060005b8a8a905081101561100e5760008b8b83818110610d6d57610d6c61398c565b5b9050602002810190610d7f91906139ca565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905061040081511115610e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0190613a79565b60405180910390fd5b6000815103610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590613ae5565b60405180910390fd5b6000339050600060405180608001604052808681526020018481526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018373ffffffffffffffffffffffffffffffffffffffff16815250905060986000878152602001908152602001600020819080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001556020820151816001019081610f2e9190613d36565b506040820151816002019081610f449190613d36565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505084610f98906134b6565b94508f8f604051610faa929190613e38565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f4675cdca972914dafd78fcb7825e449d618bf79f55e2e22c0ac158c44d4bea7c83604051610ff89190613ebb565b60405180910390a3836001019350505050610d4d565b50505050505050505050505050565b61102561270b565b61102d6129d1565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611061612987565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b815260040161110391906137a2565b602060405180830381865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114491906137d9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab90613852565b60405180910390fd5b600086866040516111c692919061346e565b60405180910390209050600033905060005b868690508110156114e95760008787838181106111f8576111f761398c565b5b90506020020135905060006098600086815260200190815260200160002082815481106112285761122761398c565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201805461125b90613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461128790613b63565b80156112d45780601f106112a9576101008083540402835291602001916112d4565b820191906000526020600020905b8154815290600101906020018083116112b757829003601f168201915b505050505081526020016002820180546112ed90613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461131990613b63565b80156113665780601f1061133b57610100808354040283529160200191611366565b820191906000526020600020905b81548152906001019060200180831161134957829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614611439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143090613f29565b60405180910390fd5b600160996000878152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055508a8a604051611486929190613e38565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f2b09d96cf58e161ed99635301ba30c0b700667f41da0732d39eb7f25e3057748836040516114d49190613ebb565b60405180910390a382600101925050506111d8565b505050505050505050565b6114fc612987565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b815260040161159e91906137a2565b602060405180830381865afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df91906137d9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164690613852565b60405180910390fd5b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b81526004016116f191906137a2565b602060405180830381865afa15801561170e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117329190613887565b9050804210611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d90613900565b60405180910390fd5b60008a8a60405161178892919061346e565b60405180910390209050600033905060005b6098600084815260200190815260200160002080549050811015611ad15760996000848152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16611ac65760006098600085815260200190815260200160002082815481106118155761181461398c565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201805461184890613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461187490613b63565b80156118c15780601f10611896576101008083540402835291602001916118c1565b820191906000526020600020905b8154815290600101906020018083116118a457829003601f168201915b505050505081526020016002820180546118da90613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461190690613b63565b80156119535780601f1061192857610100808354040283529160200191611953565b820191906000526020600020905b81548152906001019060200180831161193657829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508273ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1603611ac4578a80611a4857508989604051602001611a05929190613e38565b604051602081830303815290604052805190602001208160400151604051602001611a309190613f7a565b60405160208183030381529060405280519060200120145b15611ac3578b609860008681526020019081526020016000208381548110611a7357611a7261398c565b5b906000526020600020906004020160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b505b80600101905061179a565b50505050505050505050505050565b611ae8612987565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b8152600401611b8a91906137a2565b602060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb91906137d9565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3290613852565b60405180910390fd5b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b8152600401611cdd91906137a2565b602060405180830381865afa158015611cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1e9190613887565b9050804210611d62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5990613900565b60405180910390fd5b60008989604051611d7492919061346e565b6040518091039020905060986000828152602001908152602001600020805490508810611dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcd90613fdd565b60405180910390fd5b6000609860008381526020019081526020016000208981548110611dfd57611dfc61398c565b5b906000526020600020906004020160405180608001604052908160008201548152602001600182018054611e3090613b63565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5c90613b63565b8015611ea95780601f10611e7e57610100808354040283529160200191611ea9565b820191906000526020600020905b815481529060010190602001808311611e8c57829003601f168201915b50505050508152602001600282018054611ec290613b63565b80601f0160208091040260200160405190810160405280929190818152602001828054611eee90613b63565b8015611f3b5780601f10611f1057610100808354040283529160200191611f3b565b820191906000526020600020905b815481529060010190602001808311611f1e57829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000339050610400898990501115611fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe090613a79565b60405180910390fd5b6000898990500361202f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202690613ae5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16146120a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209890613f29565b60405180910390fd5b6099600084815260200190815260200160002060008b815260200190815260200160002060009054906101000a900460ff1615612113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210a90614049565b60405180910390fd5b81604001516040516121259190613f7a565b60405180910390208a8d8d60405161213e929190613e38565b60405180910390207fd2e7566fe48b6865216321adccc8f60d7823b62e3d3261cbaeddb2652021e4b23386602001518e8e88604051612181959493929190614096565b60405180910390a48888609860008681526020019081526020016000208c815481106121b0576121af61398c565b5b906000526020600020906004020160010191826121ce9291906140f6565b50505050505050505050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6098602052816000526040600020818154811061221f57600080fd5b90600052602060002090600402016000915091505080600001549080600101805461224990613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461227590613b63565b80156122c25780601f10612297576101008083540402835291602001916122c2565b820191906000526020600020905b8154815290600101906020018083116122a557829003601f168201915b5050505050908060020180546122d790613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461230390613b63565b80156123505780601f1061232557610100808354040283529160200191612350565b820191906000526020600020905b81548152906001019060200180831161233357829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b60606000838360405161239492919061346e565b6040518091039020905060006123aa85856104aa565b905060008167ffffffffffffffff8111156123c8576123c7613b05565b5b60405190808252806020026020018201604052801561240157816020015b6123ee612b52565b8152602001906001900390816123e65790505b5090506000805b60986000868152602001908152602001600020805490508110156126545760996000868152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16612649576098600086815260200190815260200160002081815481106124815761248061398c565b5b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546124b490613b63565b80601f01602080910402602001604051908101604052809291908181526020018280546124e090613b63565b801561252d5780601f106125025761010080835404028352916020019161252d565b820191906000526020600020905b81548152906001019060200180831161251057829003601f168201915b5050505050815260200160028201805461254690613b63565b80601f016020809104026020016040519081016040528092919081815260200182805461257290613b63565b80156125bf5780601f10612594576101008083540402835291602001916125bf565b820191906000526020600020905b8154815290600101906020018083116125a257829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505083838061262a906134b6565b94508151811061263d5761263c61398c565b5b60200260200101819052505b806001019050612408565b508194505050505092915050565b61266a61270b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036126d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d090614238565b60405180910390fd5b6126e2816128c1565b50565b609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612713612a34565b73ffffffffffffffffffffffffffffffffffffffff1661273161102f565b73ffffffffffffffffffffffffffffffffffffffff1614612787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277e906142a4565b60405180910390fd5b565b612791612a3c565b6000606560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6127d5612a34565b6040516127e29190612f3c565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661285e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285590614336565b60405180910390fd5b612866612a85565b565b600060019054906101000a900460ff166128b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ae90614336565b60405180910390fd5b6128bf612af1565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61298f610a1e565b156129cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c6906143a2565b60405180910390fd5b565b6129d9612987565b6001606560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a1d612a34565b604051612a2a9190612f3c565b60405180910390a1565b600033905090565b612a44610a1e565b612a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7a9061440e565b60405180910390fd5b565b600060019054906101000a900460ff16612ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acb90614336565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16612b40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3790614336565b60405180910390fd5b612b50612b4b612a34565b6128c1565b565b6040518060800160405280600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bc582612b9a565b9050919050565b612bd581612bba565b8114612be057600080fd5b50565b600081359050612bf281612bcc565b92915050565b600060208284031215612c0e57612c0d612b90565b5b6000612c1c84828501612be3565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612c4a57612c49612c25565b5b8235905067ffffffffffffffff811115612c6757612c66612c2a565b5b602083019150836001820283011115612c8357612c82612c2f565b5b9250929050565b60008060208385031215612ca157612ca0612b90565b5b600083013567ffffffffffffffff811115612cbf57612cbe612b95565b5b612ccb85828601612c34565b92509250509250929050565b6000819050919050565b612cea81612cd7565b82525050565b6000602082019050612d056000830184612ce1565b92915050565b60008060408385031215612d2257612d21612b90565b5b6000612d3085828601612be3565b9250506020612d4185828601612be3565b9150509250929050565b6000819050919050565b612d5e81612d4b565b8114612d6957600080fd5b50565b600081359050612d7b81612d55565b92915050565b612d8a81612cd7565b8114612d9557600080fd5b50565b600081359050612da781612d81565b92915050565b60008060408385031215612dc457612dc3612b90565b5b6000612dd285828601612d6c565b9250506020612de385828601612d98565b9150509250929050565b60008115159050919050565b612e0281612ded565b82525050565b6000602082019050612e1d6000830184612df9565b92915050565b60008083601f840112612e3957612e38612c25565b5b8235905067ffffffffffffffff811115612e5657612e55612c2a565b5b602083019150836020820283011115612e7257612e71612c2f565b5b9250929050565b60008060008060008060608789031215612e9657612e95612b90565b5b600087013567ffffffffffffffff811115612eb457612eb3612b95565b5b612ec089828a01612c34565b9650965050602087013567ffffffffffffffff811115612ee357612ee2612b95565b5b612eef89828a01612e23565b9450945050604087013567ffffffffffffffff811115612f1257612f11612b95565b5b612f1e89828a01612c34565b92509250509295509295509295565b612f3681612bba565b82525050565b6000602082019050612f516000830184612f2d565b92915050565b60008083601f840112612f6d57612f6c612c25565b5b8235905067ffffffffffffffff811115612f8a57612f89612c2a565b5b602083019150836020820283011115612fa657612fa5612c2f565b5b9250929050565b60008060008060408587031215612fc757612fc6612b90565b5b600085013567ffffffffffffffff811115612fe557612fe4612b95565b5b612ff187828801612c34565b9450945050602085013567ffffffffffffffff81111561301457613013612b95565b5b61302087828801612f57565b925092505092959194509250565b61303781612ded565b811461304257600080fd5b50565b6000813590506130548161302e565b92915050565b6000806000806000806080878903121561307757613076612b90565b5b600087013567ffffffffffffffff81111561309557613094612b95565b5b6130a189828a01612c34565b965096505060206130b489828a01612be3565b94505060406130c589828a01613045565b935050606087013567ffffffffffffffff8111156130e6576130e5612b95565b5b6130f289828a01612c34565b92509250509295509295509295565b60008060008060006060868803121561311d5761311c612b90565b5b600086013567ffffffffffffffff81111561313b5761313a612b95565b5b61314788828901612c34565b9550955050602061315a88828901612d98565b935050604086013567ffffffffffffffff81111561317b5761317a612b95565b5b61318788828901612c34565b92509250509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b838110156131d05780820151818401526020810190506131b5565b60008484015250505050565b6000601f19601f8301169050919050565b60006131f882613196565b61320281856131a1565b93506132128185602086016131b2565b61321b816131dc565b840191505092915050565b600060808201905061323b6000830187612ce1565b818103602083015261324d81866131ed565b9050818103604083015261326181856131ed565b90506132706060830184612f2d565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132ae81612cd7565b82525050565b600082825260208201905092915050565b60006132d082613196565b6132da81856132b4565b93506132ea8185602086016131b2565b6132f3816131dc565b840191505092915050565b61330781612bba565b82525050565b600060808301600083015161332560008601826132a5565b506020830151848203602086015261333d82826132c5565b9150506040830151848203604086015261335782826132c5565b915050606083015161336c60608601826132fe565b508091505092915050565b6000613383838361330d565b905092915050565b6000602082019050919050565b60006133a382613279565b6133ad8185613284565b9350836020820285016133bf85613295565b8060005b858110156133fb57848403895281516133dc8582613377565b94506133e78361338b565b925060208a019950506001810190506133c3565b50829750879550505050505092915050565b600060208201905081810360008301526134278184613398565b905092915050565b600081905092915050565b82818337600083830152505050565b6000613455838561342f565b935061346283858461343a565b82840190509392505050565b600061347b828486613449565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134c182612cd7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134f3576134f2613487565b5b600182019050919050565b7f506f73743a206d757374206265206f776e6572206f7220726576656e7565206160008201527f63636f756e740000000000000000000000000000000000000000000000000000602082015250565b600061355a6026836131a1565b9150613565826134fe565b604082019050919050565b600060208201905081810360008301526135898161354d565b9050919050565b50565b60006135a060008361342f565b91506135ab82613590565b600082019050919050565b60006135c182613593565b9150819050919050565b7f506f73743a206661696c656420746f2077697468647261770000000000000000600082015250565b60006136016018836131a1565b915061360c826135cb565b602082019050919050565b60006020820190508181036000830152613630816135f4565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613693602e836131a1565b915061369e82613637565b604082019050919050565b600060208201905081810360008301526136c281613686565b9050919050565b7f506f73743a207a65726f20616464726573730000000000000000000000000000600082015250565b60006136ff6012836131a1565b915061370a826136c9565b602082019050919050565b6000602082019050818103600083015261372e816136f2565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061377161376c61376784613735565b61374c565b61373f565b9050919050565b61378181613756565b82525050565b600060208201905061379c6000830184613778565b92915050565b600060208201905081810360008301526137bc81846131ed565b905092915050565b6000815190506137d381612bcc565b92915050565b6000602082840312156137ef576137ee612b90565b5b60006137fd848285016137c4565b91505092915050565b7f506f73743a206f6e6c79204443206f776e657200000000000000000000000000600082015250565b600061383c6013836131a1565b915061384782613806565b602082019050919050565b6000602082019050818103600083015261386b8161382f565b9050919050565b60008151905061388181612d81565b92915050565b60006020828403121561389d5761389c612b90565b5b60006138ab84828501613872565b91505092915050565b7f506f73743a206578706972656420646f6d61696e000000000000000000000000600082015250565b60006138ea6014836131a1565b91506138f5826138b4565b602082019050919050565b60006020820190508181036000830152613919816138dd565b9050919050565b7f506f73743a20616c69617320746f6f206c6f6e67000000000000000000000000600082015250565b60006139566014836131a1565b915061396182613920565b602082019050919050565b6000602082019050818103600083015261398581613949565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126139e7576139e66139bb565b5b80840192508235915067ffffffffffffffff821115613a0957613a086139c0565b5b602083019250600182023603831315613a2557613a246139c5565b5b509250929050565b7f506f73743a2075726c20746f6f206c6f6e670000000000000000000000000000600082015250565b6000613a636012836131a1565b9150613a6e82613a2d565b602082019050919050565b60006020820190508181036000830152613a9281613a56565b9050919050565b7f506f73743a20656d7074792075726c0000000000000000000000000000000000600082015250565b6000613acf600f836131a1565b9150613ada82613a99565b602082019050919050565b60006020820190508181036000830152613afe81613ac2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b7b57607f821691505b602082108103613b8e57613b8d613b34565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613bf67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613bb9565b613c008683613bb9565b95508019841693508086168417925050509392505050565b6000613c33613c2e613c2984612cd7565b61374c565b612cd7565b9050919050565b6000819050919050565b613c4d83613c18565b613c61613c5982613c3a565b848454613bc6565b825550505050565b600090565b613c76613c69565b613c81818484613c44565b505050565b5b81811015613ca557613c9a600082613c6e565b600181019050613c87565b5050565b601f821115613cea57613cbb81613b94565b613cc484613ba9565b81016020851015613cd3578190505b613ce7613cdf85613ba9565b830182613c86565b50505b505050565b600082821c905092915050565b6000613d0d60001984600802613cef565b1980831691505092915050565b6000613d268383613cfc565b9150826002028217905092915050565b613d3f82613196565b67ffffffffffffffff811115613d5857613d57613b05565b5b613d628254613b63565b613d6d828285613ca9565b600060209050601f831160018114613da05760008415613d8e578287015190505b613d988582613d1a565b865550613e00565b601f198416613dae86613b94565b60005b82811015613dd657848901518255600182019150602085019450602081019050613db1565b86831015613df35784890151613def601f891682613cfc565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000613e1f8385613e08565b9350613e2c83858461343a565b82840190509392505050565b6000613e45828486613e13565b91508190509392505050565b6000608083016000830151613e6960008601826132a5565b5060208301518482036020860152613e8182826132c5565b91505060408301518482036040860152613e9b82826132c5565b9150506060830151613eb060608601826132fe565b508091505092915050565b60006020820190508181036000830152613ed58184613e51565b905092915050565b7f506f73743a206f6e6c7920706f7374206f776e65720000000000000000000000600082015250565b6000613f136015836131a1565b9150613f1e82613edd565b602082019050919050565b60006020820190508181036000830152613f4281613f06565b9050919050565b6000613f5482613196565b613f5e8185613e08565b9350613f6e8185602086016131b2565b80840191505092915050565b6000613f868284613f49565b915081905092915050565b7f506f73743a20696e76616c696420706f73742049640000000000000000000000600082015250565b6000613fc76015836131a1565b9150613fd282613f91565b602082019050919050565b60006020820190508181036000830152613ff681613fba565b9050919050565b7f506f73743a206e6f742065786973740000000000000000000000000000000000600082015250565b6000614033600f836131a1565b915061403e82613ffd565b602082019050919050565b6000602082019050818103600083015261406281614026565b9050919050565b600061407583856131a1565b935061408283858461343a565b61408b836131dc565b840190509392505050565b60006080820190506140ab6000830188612f2d565b81810360208301526140bd81876131ed565b905081810360408301526140d2818587614069565b90506140e16060830184612f2d565b9695505050505050565b600082905092915050565b61410083836140eb565b67ffffffffffffffff81111561411957614118613b05565b5b6141238254613b63565b61412e828285613ca9565b6000601f83116001811461415d576000841561414b578287013590505b6141558582613d1a565b8655506141bd565b601f19841661416b86613b94565b60005b828110156141935784890135825560018201915060208501945060208101905061416e565b868310156141b057848901356141ac601f891682613cfc565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006142226026836131a1565b915061422d826141c6565b604082019050919050565b6000602082019050818103600083015261425181614215565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061428e6020836131a1565b915061429982614258565b602082019050919050565b600060208201905081810360008301526142bd81614281565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614320602b836131a1565b915061432b826142c4565b604082019050919050565b6000602082019050818103600083015261434f81614313565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061438c6010836131a1565b915061439782614356565b602082019050919050565b600060208201905081810360008301526143bb8161437f565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006143f86014836131a1565b9150614403826143c2565b602082019050919050565b60006020820190508181036000830152614427816143eb565b905091905056fea26469706673582212204c292a5b12b1a8c457b47743f2e5714e1efba877ca07a63deefcd15a6b93d9eb64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewPost(string,string[],string)": {
        "details": "All posts have the same name space",
        "params": {
          "_name": "domain name",
          "_nameSpace": "name space of the post",
          "_urls": "URL list of the post"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deletePost(string,uint256[])": {
        "details": "Deleting the posts is available regardless the domain expiration",
        "params": {
          "_name": "domain name",
          "_postIds": "postId list to delete"
        }
      },
      "getPostCount(string)": {
        "params": {
          "_name": "domain name"
        }
      },
      "getPosts(string)": {
        "params": {
          "_name": "domain name"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDCAddress(address)": {
        "params": {
          "_dc": "DC contract address"
        }
      },
      "setRevenueAccount(address)": {
        "params": {
          "_revenueAccount": "revenue account address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "trasnferPostOwnership(string,address,bool,string)": {
        "params": {
          "_isAllNameSpace": "indicate whether posts in all name spaces should be transferred or not",
          "_name": "domain name to transfer posts",
          "_nameSpace": "name space of the posts to trasnfer, available only if _isAllNameSpace = false",
          "_receiver": "address to receive the posts"
        }
      },
      "updatePost(string,uint256,string)": {
        "details": "Updating the posts is not available after the domain is expired",
        "params": {
          "_name": "domain name",
          "_newURL": "new URL address of the post",
          "_postId": "postId of the post"
        }
      },
      "withdraw()": {
        "details": "Only owner of the revenue account can withdraw funds"
      }
    },
    "stateVariables": {
      "dc": {
        "details": "DC contract"
      },
      "isPostDeleted": {
        "details": "DC TokenId -> PostId -> Bool"
      },
      "posts": {
        "details": "DC TokenId -> PostInfo list"
      },
      "revenueAccount": {
        "details": "Fee withdrawal address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewPost(string,string[],string)": {
        "notice": "Add a new posts"
      },
      "deletePost(string,uint256[])": {
        "notice": "Delete the existing posts"
      },
      "getPostCount(string)": {
        "notice": "Returns the number of valid posts registered in the specific domain"
      },
      "getPosts(string)": {
        "notice": "Returns all the valid posts registered in the specific domain"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setDCAddress(address)": {
        "notice": "Set the DC contract address"
      },
      "setRevenueAccount(address)": {
        "notice": "Set the revenue account"
      },
      "trasnferPostOwnership(string,address,bool,string)": {
        "notice": "Transfer the post to another address"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "updatePost(string,uint256,string)": {
        "notice": "Update the existing post"
      },
      "withdraw()": {
        "notice": "Withdraw funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Post.sol:Post",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Post.sol:Post",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Post.sol:Post",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Post.sol:Post",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1276,
        "contract": "contracts/Post.sol:Post",
        "label": "dc",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 1283,
        "contract": "contracts/Post.sol:Post",
        "label": "posts",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_array(t_struct(PostInfo)1273_storage)dyn_storage)"
      },
      {
        "astId": 1290,
        "contract": "contracts/Post.sol:Post",
        "label": "isPostDeleted",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1293,
        "contract": "contracts/Post.sol:Post",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PostInfo)1273_storage)dyn_storage": {
        "base": "t_struct(PostInfo)1273_storage",
        "encoding": "dynamic_array",
        "label": "struct Post.PostInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_array(t_struct(PostInfo)1273_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Post.PostInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PostInfo)1273_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PostInfo)1273_storage": {
        "encoding": "inplace",
        "label": "struct Post.PostInfo",
        "members": [
          {
            "astId": 1266,
            "contract": "contracts/Post.sol:Post",
            "label": "postId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1268,
            "contract": "contracts/Post.sol:Post",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1270,
            "contract": "contracts/Post.sol:Post",
            "label": "nameSpace",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1272,
            "contract": "contracts/Post.sol:Post",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}