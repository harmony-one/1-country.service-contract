{
  "address": "0x03861a559150128CDcA1BB8734510e7A4d23583d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Post.PostInfo",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "NewPostAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Post.PostInfo",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "PostDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURL",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURL",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldNameSpace",
          "type": "string"
        }
      ],
      "name": "PostUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        }
      ],
      "name": "addNewPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_postIds",
          "type": "uint256[]"
        }
      ],
      "name": "deletePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "postCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "postId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nameSpace",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Post.PostInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPostDeleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_tweetURLs",
          "type": "string[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "pinPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pinnedPostId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postAddPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nameSpace",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        }
      ],
      "name": "setDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postAddPrice",
          "type": "uint256"
        }
      ],
      "name": "setPostAddPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllNameSpace",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        }
      ],
      "name": "transferPostOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nameSpace",
          "type": "string"
        }
      ],
      "name": "unpinPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newURL",
          "type": "string"
        }
      ],
      "name": "updatePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf05a75d0ba77ddfe7fdff31ad07c087b547e3ea004c4801e11f52479021a6701",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0x03861a559150128CDcA1BB8734510e7A4d23583d",
    "transactionIndex": 0,
    "gasUsed": "5146672",
    "logsBloom": "0x
    "blockHash": "0xe17619067b59d64b48c77b28559d617b403828e6b7c4b12f7f2bcce92f837e3d",
    "transactionHash": "0xf05a75d0ba77ddfe7fdff31ad07c087b547e3ea004c4801e11f52479021a6701",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 42135274,
        "transactionHash": "0xf05a75d0ba77ddfe7fdff31ad07c087b547e3ea004c4801e11f52479021a6701",
        "address": "0x03861a559150128CDcA1BB8734510e7A4d23583d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xe17619067b59d64b48c77b28559d617b403828e6b7c4b12f7f2bcce92f837e3d"
      }
    ],
    "blockNumber": 42135274,
    "cumulativeGasUsed": "5146672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dca0f7a0acf3972e736463277d70d74f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Post.PostInfo\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"NewPostAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Post.PostInfo\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"PostDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldNameSpace\",\"type\":\"string\"}],\"name\":\"PostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"}],\"name\":\"addNewPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_postIds\",\"type\":\"uint256[]\"}],\"name\":\"deletePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Post.PostInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPostDeleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tweetURLs\",\"type\":\"string[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"pinPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pinnedPostId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postAddPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nameSpace\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"}],\"name\":\"setDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postAddPrice\",\"type\":\"uint256\"}],\"name\":\"setPostAddPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllNameSpace\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"}],\"name\":\"transferPostOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nameSpace\",\"type\":\"string\"}],\"name\":\"unpinPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newURL\",\"type\":\"string\"}],\"name\":\"updatePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewPost(string,string[],string)\":{\"details\":\"All posts have the same name space\",\"params\":{\"_name\":\"domain name\",\"_nameSpace\":\"name space of the post\",\"_urls\":\"URL list of the post\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deletePost(string,uint256[])\":{\"details\":\"Deleting the posts is available regardless the domain expiration\",\"params\":{\"_name\":\"domain name\",\"_postIds\":\"postId list to delete\"}},\"getPostCount(string)\":{\"params\":{\"_name\":\"domain name\"}},\"getPosts(string)\":{\"params\":{\"_name\":\"domain name\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pinPost(string,string,uint256)\":{\"details\":\"if the postId to pin is 0, store max value of uint256 instead of 0\",\"params\":{\"_name\":\"domain name\",\"_nameSpace\":\"namespace\",\"_postId\":\"id of the post to pin\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDCAddress(address)\":{\"params\":{\"_dc\":\"DC contract address\"}},\"setPostAddPrice(uint256)\":{\"params\":{\"_postAddPrice\":\"price for the post addition\"}},\"setRevenueAccount(address)\":{\"params\":{\"_revenueAccount\":\"revenue account address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferPostOwnership(string,address,bool,string)\":{\"params\":{\"_isAllNameSpace\":\"indicate whether posts in all name spaces should be transferred or not\",\"_name\":\"domain name to transfer posts\",\"_nameSpace\":\"name space of the posts to trasnfer, available only if _isAllNameSpace = false\",\"_receiver\":\"address to receive the posts\"}},\"unpinPost(string,string)\":{\"params\":{\"_name\":\"domain name\",\"_nameSpace\":\"namespace\"}},\"updatePost(string,uint256,string)\":{\"details\":\"Updating the posts is not available after the domain is expired\",\"params\":{\"_name\":\"domain name\",\"_newURL\":\"new URL address of the post\",\"_postId\":\"postId of the post\"}},\"withdraw()\":{\"details\":\"Only owner of the revenue account can withdraw funds\"}},\"stateVariables\":{\"dc\":{\"details\":\"DC contract\"},\"isPostDeleted\":{\"details\":\"DC TokenId -> PostId -> Bool\"},\"pinnedPostId\":{\"details\":\"DC TokenId -> Owner -> NameSpace -> PostId pinned\"},\"postAddPrice\":{\"details\":\"Price for the post addition\"},\"posts\":{\"details\":\"DC TokenId -> PostInfo list\"},\"revenueAccount\":{\"details\":\"Fee withdrawal address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewPost(string,string[],string)\":{\"notice\":\"Add a new posts\"},\"deletePost(string,uint256[])\":{\"notice\":\"Delete the existing posts\"},\"getPostCount(string)\":{\"notice\":\"Returns the number of valid posts registered in the specific domain\"},\"getPosts(string)\":{\"notice\":\"Returns all the valid posts registered in the specific domain\"},\"migrate(string,string[])\":{\"notice\":\"Migrate Tweet contract data to Post contract\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"pinPost(string,string,uint256)\":{\"notice\":\"Pin the post\"},\"setDCAddress(address)\":{\"notice\":\"Set the DC contract address\"},\"setPostAddPrice(uint256)\":{\"notice\":\"Set the price for the post addition\"},\"setRevenueAccount(address)\":{\"notice\":\"Set the revenue account\"},\"transferPostOwnership(string,address,bool,string)\":{\"notice\":\"Transfer the post to another address\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"unpinPost(string,string)\":{\"notice\":\"Unpin the post\"},\"updatePost(string,uint256,string)\":{\"notice\":\"Update the existing post\"},\"withdraw()\":{\"notice\":\"Withdraw funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Post.sol\":\"Post\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Post.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDC.sol\\\";\\n\\ncontract Post is OwnableUpgradeable, PausableUpgradeable {\\n    struct PostInfo {\\n        uint256 postId; // starts from 0\\n        string url;\\n        string nameSpace;\\n        address owner;\\n    }\\n\\n    /// @dev DC contract\\n    address public dc;\\n\\n    /// @dev DC TokenId -> PostInfo list\\n    mapping(bytes32 => PostInfo[]) public posts;\\n\\n    /// @dev DC TokenId -> PostId -> Bool\\n    mapping(bytes32 => mapping(uint256 => bool)) public isPostDeleted;\\n\\n    /// @dev Fee withdrawal address\\n    address public revenueAccount;\\n\\n    /// @dev DC TokenId -> Owner -> NameSpace -> PostId pinned\\n    mapping(bytes32 => mapping(address => mapping(string => uint256))) public pinnedPostId;\\n\\n    /// @dev Price for the post addition\\n    uint256 public postAddPrice;\\n\\n    event NewPostAdded(address indexed by, string indexed name, PostInfo post);\\n    event PostDeleted(address indexed by, string indexed name, PostInfo post);\\n    event PostUpdated(\\n        address indexed by,\\n        string indexed name,\\n        uint256 indexed postId,\\n        string oldURL,\\n        string newURL,\\n        string oldNameSpace\\n    );\\n    event RevenueAccountChanged(address indexed from, address indexed to);\\n\\n    modifier onlyDCOwner(string memory _name) {\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n        require(msg.sender == dcOwner, \\\"Post: only DC owner\\\");\\n        _;\\n    }\\n\\n    modifier whenDomainNotExpired(string memory _name) {\\n        uint256 domainExpireAt = IDC(dc).nameExpires(_name);\\n        require(block.timestamp < domainExpireAt, \\\"Post: expired domain\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _dc, address _revenueAccount) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n\\n        require(_dc != address(0), \\\"Post: zero address\\\");\\n\\n        dc = _dc;\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Set the DC contract address\\n    /// @param _dc DC contract address\\n    function setDCAddress(address _dc) external onlyOwner {\\n        dc = _dc;\\n    }\\n\\n    /// @notice Set the price for the post addition\\n    /// @param _postAddPrice price for the post addition\\n    function setPostAddPrice(uint256 _postAddPrice) external onlyOwner {\\n        postAddPrice = _postAddPrice;\\n    }\\n\\n    /// @notice Set the revenue account\\n    /// @param _revenueAccount revenue account address\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Add a new posts\\n    /// @dev All posts have the same name space\\n    /// @param _name domain name\\n    /// @param _urls URL list of the post\\n    /// @param _nameSpace name space of the post\\n    function addNewPost(\\n        string calldata _name,\\n        string[] calldata _urls,\\n        string calldata _nameSpace\\n    ) external payable whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        require(bytes(_nameSpace).length <= 1024, \\\"Post: alias too long\\\");\\n        require(msg.value == postAddPrice, \\\"Post: incorrect payment\\\");\\n\\n        uint256 nextPostId = posts[tokenId].length;\\n        for (uint256 i = 0; i < _urls.length; ) {\\n            string memory url = _urls[i];\\n\\n            require(bytes(url).length <= 1024, \\\"Post: url too long\\\");\\n            require(bytes(url).length != 0, \\\"Post: empty url\\\");\\n\\n            // set a new post\\n            address domainOwner = msg.sender;\\n            PostInfo memory postInfo = PostInfo({\\n                postId: nextPostId,\\n                url: url,\\n                nameSpace: _nameSpace,\\n                owner: domainOwner\\n            });\\n            posts[tokenId].push(postInfo);\\n\\n            // incrase the next post Id\\n            ++nextPostId;\\n\\n            emit NewPostAdded(msg.sender, _name, postInfo);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Delete the existing posts\\n    /// @dev Deleting the posts is available regardless the domain expiration\\n    /// @param _name domain name\\n    /// @param _postIds postId list to delete\\n    function deletePost(string calldata _name, uint256[] calldata _postIds) external whenNotPaused onlyDCOwner(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address domainOwner = msg.sender;\\n\\n        for (uint256 i = 0; i < _postIds.length; ) {\\n            uint256 postId = _postIds[i];\\n            PostInfo memory postInfo = posts[tokenId][postId];\\n\\n            require(postInfo.owner == domainOwner, \\\"Post: only post owner\\\");\\n\\n            isPostDeleted[tokenId][postId] = true;\\n            if (pinnedPostId[tokenId][domainOwner][postInfo.nameSpace] == postId) {\\n                // reset the pinned post\\n                delete pinnedPostId[tokenId][domainOwner][postInfo.nameSpace];\\n            }\\n\\n            emit PostDeleted(msg.sender, _name, postInfo);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Update the existing post\\n    /// @dev Updating the posts is not available after the domain is expired\\n    /// @param _name domain name\\n    /// @param _postId postId of the post\\n    /// @param _newURL new URL address of the post\\n    function updatePost(\\n        string calldata _name,\\n        uint256 _postId,\\n        string calldata _newURL\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        require(_postId < posts[tokenId].length, \\\"Post: invalid post Id\\\");\\n\\n        PostInfo memory postInfo = posts[tokenId][_postId];\\n        address domainOwner = msg.sender;\\n\\n        require(bytes(_newURL).length <= 1024, \\\"Post: url too long\\\");\\n        require(bytes(_newURL).length != 0, \\\"Post: empty url\\\");\\n        require(postInfo.owner == domainOwner, \\\"Post: only post owner\\\");\\n        require(!isPostDeleted[tokenId][_postId], \\\"Post: not exist\\\");\\n\\n        emit PostUpdated(msg.sender, _name, _postId, postInfo.url, _newURL, postInfo.nameSpace);\\n\\n        // update the post\\n        posts[tokenId][_postId].url = _newURL;\\n    }\\n\\n    /// @notice Transfer the post to another address\\n    /// @param _name domain name to transfer posts\\n    /// @param _receiver address to receive the posts\\n    /// @param _isAllNameSpace indicate whether posts in all name spaces should be transferred or not\\n    /// @param _nameSpace name space of the posts to trasnfer, available only if _isAllNameSpace = false\\n    function transferPostOwnership(\\n        string calldata _name,\\n        address _receiver,\\n        bool _isAllNameSpace,\\n        string calldata _nameSpace\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address sender = msg.sender;\\n\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                // transfer the post ownership\\n                PostInfo memory postInfo = posts[tokenId][i];\\n\\n                if (postInfo.owner == sender) {\\n                    if (\\n                        _isAllNameSpace ||\\n                        keccak256(abi.encodePacked(postInfo.nameSpace)) == keccak256(abi.encodePacked(_nameSpace))\\n                    ) {\\n                        // transfer the ownership\\n                        posts[tokenId][i].owner = _receiver;\\n\\n                        // reset the pinned post to avoid the multiple pinned post\\n                        uint256 targetPostId = pinnedPostId[tokenId][sender][postInfo.nameSpace];\\n                        if (targetPostId == type(uint256).max) {\\n                            // if pinnedPostId = type(uint256).max, it means the postId 0\\n                            targetPostId = 0;\\n                        }\\n\\n                        if (postInfo.postId == targetPostId) {\\n                            delete pinnedPostId[tokenId][sender][postInfo.nameSpace];\\n                        }\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Pin the post\\n    /// @dev if the postId to pin is 0, store max value of uint256 instead of 0\\n    /// @param _name domain name\\n    /// @param _nameSpace namespace\\n    /// @param _postId id of the post to pin\\n    function pinPost(\\n        string calldata _name,\\n        string calldata _nameSpace,\\n        uint256 _postId\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address domainOwner = msg.sender;\\n        PostInfo memory postInfo = posts[tokenId][_postId];\\n\\n        require(!isPostDeleted[tokenId][_postId], \\\"Post: not exist\\\");\\n        require(pinnedPostId[tokenId][domainOwner][_nameSpace] == 0, \\\"Post: pinned post already exists\\\");\\n        require(\\n            keccak256(abi.encodePacked(postInfo.nameSpace)) == keccak256(abi.encodePacked(_nameSpace)),\\n            \\\"Post: mismatched namespace\\\"\\n        );\\n        require(postInfo.owner == domainOwner, \\\"Post: invalid post owner\\\");\\n\\n        if (_postId == 0) {\\n            pinnedPostId[tokenId][domainOwner][_nameSpace] = type(uint256).max;\\n        } else {\\n            pinnedPostId[tokenId][domainOwner][_nameSpace] = _postId;\\n        }\\n    }\\n\\n    /// @notice Unpin the post\\n    /// @param _name domain name\\n    /// @param _nameSpace namespace\\n    function unpinPost(\\n        string calldata _name,\\n        string calldata _nameSpace\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address domainOwner = msg.sender;\\n\\n        require(pinnedPostId[tokenId][domainOwner][_nameSpace] != 0, \\\"Post: pinned post not exist\\\");\\n\\n        delete pinnedPostId[tokenId][domainOwner][_nameSpace];\\n    }\\n\\n    /// @notice Returns all the valid posts registered in the specific domain\\n    /// @param _name domain name\\n    function getPosts(string calldata _name) external view returns (PostInfo[] memory) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        uint256 postCount = getPostCount(_name);\\n\\n        PostInfo[] memory postList = new PostInfo[](postCount);\\n        uint256 postIndex = 0;\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                postList[postIndex++] = posts[tokenId][i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return postList;\\n    }\\n\\n    /// @notice Returns the number of valid posts registered in the specific domain\\n    /// @param _name domain name\\n    function getPostCount(string calldata _name) public view returns (uint256 postCount) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        for (uint256 i = 0; i < posts[tokenId].length; ) {\\n            if (!isPostDeleted[tokenId][i]) {\\n                ++postCount;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw funds\\n    /// @dev Only owner of the revenue account can withdraw funds\\n    function withdraw() external {\\n        require(msg.sender == owner() || msg.sender == revenueAccount, \\\"Post: must be owner or revenue account\\\");\\n        (bool success, ) = revenueAccount.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Post: failed to withdraw\\\");\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Migrate Tweet contract data to Post contract\\n    function migrate(string calldata _name, string[] calldata _tweetURLs) external onlyOwner {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n\\n        uint256 nextPostId = posts[tokenId].length;\\n        for (uint256 i = 0; i < _tweetURLs.length; ) {\\n            PostInfo memory postInfo = PostInfo({\\n                postId: nextPostId++,\\n                url: _tweetURLs[i],\\n                nameSpace: \\\"\\\",\\n                owner: dcOwner\\n            });\\n            posts[tokenId].push(postInfo);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e1dbeb0f923bcc714eac2f868074897c94238e50b119c2dd2089013d5c58448\",\"license\":\"MIT\"},\"contracts/interfaces/IDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDC {\\n    function available(string memory) external view returns (bool);\\n\\n    function duration() external view returns (uint256);\\n\\n    function nameExpires(string calldata) external view returns (uint256);\\n\\n    function ownerOf(string calldata name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdbc63234084061220638d43cbb76f114dd1b1737b4b531c84b3156a57db32e88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewPost(string,string[],string)": {
        "details": "All posts have the same name space",
        "params": {
          "_name": "domain name",
          "_nameSpace": "name space of the post",
          "_urls": "URL list of the post"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deletePost(string,uint256[])": {
        "details": "Deleting the posts is available regardless the domain expiration",
        "params": {
          "_name": "domain name",
          "_postIds": "postId list to delete"
        }
      },
      "getPostCount(string)": {
        "params": {
          "_name": "domain name"
        }
      },
      "getPosts(string)": {
        "params": {
          "_name": "domain name"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pinPost(string,string,uint256)": {
        "details": "if the postId to pin is 0, store max value of uint256 instead of 0",
        "params": {
          "_name": "domain name",
          "_nameSpace": "namespace",
          "_postId": "id of the post to pin"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDCAddress(address)": {
        "params": {
          "_dc": "DC contract address"
        }
      },
      "setPostAddPrice(uint256)": {
        "params": {
          "_postAddPrice": "price for the post addition"
        }
      },
      "setRevenueAccount(address)": {
        "params": {
          "_revenueAccount": "revenue account address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferPostOwnership(string,address,bool,string)": {
        "params": {
          "_isAllNameSpace": "indicate whether posts in all name spaces should be transferred or not",
          "_name": "domain name to transfer posts",
          "_nameSpace": "name space of the posts to trasnfer, available only if _isAllNameSpace = false",
          "_receiver": "address to receive the posts"
        }
      },
      "unpinPost(string,string)": {
        "params": {
          "_name": "domain name",
          "_nameSpace": "namespace"
        }
      },
      "updatePost(string,uint256,string)": {
        "details": "Updating the posts is not available after the domain is expired",
        "params": {
          "_name": "domain name",
          "_newURL": "new URL address of the post",
          "_postId": "postId of the post"
        }
      },
      "withdraw()": {
        "details": "Only owner of the revenue account can withdraw funds"
      }
    },
    "stateVariables": {
      "dc": {
        "details": "DC contract"
      },
      "isPostDeleted": {
        "details": "DC TokenId -> PostId -> Bool"
      },
      "pinnedPostId": {
        "details": "DC TokenId -> Owner -> NameSpace -> PostId pinned"
      },
      "postAddPrice": {
        "details": "Price for the post addition"
      },
      "posts": {
        "details": "DC TokenId -> PostInfo list"
      },
      "revenueAccount": {
        "details": "Fee withdrawal address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewPost(string,string[],string)": {
        "notice": "Add a new posts"
      },
      "deletePost(string,uint256[])": {
        "notice": "Delete the existing posts"
      },
      "getPostCount(string)": {
        "notice": "Returns the number of valid posts registered in the specific domain"
      },
      "getPosts(string)": {
        "notice": "Returns all the valid posts registered in the specific domain"
      },
      "migrate(string,string[])": {
        "notice": "Migrate Tweet contract data to Post contract"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "pinPost(string,string,uint256)": {
        "notice": "Pin the post"
      },
      "setDCAddress(address)": {
        "notice": "Set the DC contract address"
      },
      "setPostAddPrice(uint256)": {
        "notice": "Set the price for the post addition"
      },
      "setRevenueAccount(address)": {
        "notice": "Set the revenue account"
      },
      "transferPostOwnership(string,address,bool,string)": {
        "notice": "Transfer the post to another address"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "unpinPost(string,string)": {
        "notice": "Unpin the post"
      },
      "updatePost(string,uint256,string)": {
        "notice": "Update the existing post"
      },
      "withdraw()": {
        "notice": "Withdraw funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Post.sol:Post",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Post.sol:Post",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Post.sol:Post",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Post.sol:Post",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/Post.sol:Post",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1017,
        "contract": "contracts/Post.sol:Post",
        "label": "dc",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 1024,
        "contract": "contracts/Post.sol:Post",
        "label": "posts",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_array(t_struct(PostInfo)1014_storage)dyn_storage)"
      },
      {
        "astId": 1031,
        "contract": "contracts/Post.sol:Post",
        "label": "isPostDeleted",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1034,
        "contract": "contracts/Post.sol:Post",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 1043,
        "contract": "contracts/Post.sol:Post",
        "label": "pinnedPostId",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256)))"
      },
      {
        "astId": 1046,
        "contract": "contracts/Post.sol:Post",
        "label": "postAddPrice",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PostInfo)1014_storage)dyn_storage": {
        "base": "t_struct(PostInfo)1014_storage",
        "encoding": "dynamic_array",
        "label": "struct Post.PostInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_bytes32,t_array(t_struct(PostInfo)1014_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Post.PostInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PostInfo)1014_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(string => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PostInfo)1014_storage": {
        "encoding": "inplace",
        "label": "struct Post.PostInfo",
        "members": [
          {
            "astId": 1007,
            "contract": "contracts/Post.sol:Post",
            "label": "postId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1009,
            "contract": "contracts/Post.sol:Post",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1011,
            "contract": "contracts/Post.sol:Post",
            "label": "nameSpace",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1013,
            "contract": "contracts/Post.sol:Post",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}