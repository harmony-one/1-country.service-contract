{
  "address": "0xcFa2f610c2134bbD03A208640f09dE4F070785E4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewURLAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "URLDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURL",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newURL",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "URLUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "addNewURL",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aliasNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        }
      ],
      "name": "deleteURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        }
      ],
      "name": "existURL",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getAliasNameCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_urlUpdatePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        }
      ],
      "name": "setDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_urlUpdatePrice",
          "type": "uint256"
        }
      ],
      "name": "setURLUpdatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "trasnferURLOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "urlUpdatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vanityURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "vanityURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7d0a30758b4a84a25ce340a848233954db6ff1a429fa48795f8e2ee5b5f69b2",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0xcFa2f610c2134bbD03A208640f09dE4F070785E4",
    "transactionIndex": 3,
    "gasUsed": "3823840",
    "logsBloom": "0x
    "blockHash": "0x8f37164ffcbe776fd59a9e96e8b2f2fff87972e29533798e5fab173daa00ed4d",
    "transactionHash": "0xc7d0a30758b4a84a25ce340a848233954db6ff1a429fa48795f8e2ee5b5f69b2",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40474761,
        "transactionHash": "0xc7d0a30758b4a84a25ce340a848233954db6ff1a429fa48795f8e2ee5b5f69b2",
        "address": "0xcFa2f610c2134bbD03A208640f09dE4F070785E4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 2,
        "blockHash": "0x8f37164ffcbe776fd59a9e96e8b2f2fff87972e29533798e5fab173daa00ed4d"
      }
    ],
    "blockNumber": 40474761,
    "cumulativeGasUsed": "4074368",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cf66256324761f96268ac343cbd94a6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewURLAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"URLDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"URLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewURL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aliasNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"}],\"name\":\"deleteURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"}],\"name\":\"existURL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAliasNameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_urlUpdatePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"}],\"name\":\"setDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_urlUpdatePrice\",\"type\":\"uint256\"}],\"name\":\"setURLUpdatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"trasnferURLOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlUpdatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vanityURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"vanityURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewURL(string,string,string,uint256)\":{\"params\":{\"_aliasName\":\"alias name for the URL\",\"_name\":\"domain name\",\"_price\":\"Price to paid for the URL access\",\"_url\":\"URL address to be redirected\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deleteURL(string,string)\":{\"details\":\"Deleting the URL is available regardless the domain expiration\",\"params\":{\"_aliasName\":\"alias name for the URL to delete\",\"_name\":\"domain name\"}},\"existURL(string,string)\":{\"params\":{\"_aliasName\":\"alias name for the URL\",\"_name\":\"domain name\"}},\"getAliasNameCount(string)\":{\"params\":{\"_name\":\"domain name\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDCAddress(address)\":{\"params\":{\"_dc\":\"DC contract address\"}},\"setRevenueAccount(address)\":{\"params\":{\"_revenueAccount\":\"revenue account address\"}},\"setURLUpdatePrice(uint256)\":{\"params\":{\"_urlUpdatePrice\":\"price for the URL update\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"trasnferURLOwnership(string,address)\":{\"params\":{\"_name\":\"domain name to transfer the vanity url ownership\",\"_receiver\":\"address to receive the vanity url ownership\"}},\"updateURL(string,string,string,uint256)\":{\"details\":\"Updating the URL is not available after the domain is expired\",\"params\":{\"_aliasName\":\"alias name for the URL\",\"_name\":\"domain name\",\"_price\":\"Price to paid for the URL access\",\"_url\":\"URL address to be redirected\"}},\"withdraw()\":{\"details\":\"Only owner of the revenue account can withdraw funds\"}},\"stateVariables\":{\"aliasNames\":{\"details\":\"DC TokenId -> Alias name list\"},\"dc\":{\"details\":\"DC contract\"},\"revenueAccount\":{\"details\":\"Fee withdrawal address\"},\"urlUpdatePrice\":{\"details\":\"Price for the url update\"},\"vanityURLs\":{\"details\":\"DC TokenId -> Alias Name -> VanityURLInfo\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewURL(string,string,string,uint256)\":{\"notice\":\"Add a new URL\"},\"deleteURL(string,string)\":{\"notice\":\"Delete the existing URL\"},\"existURL(string,string)\":{\"notice\":\"Returns the validity of the vanity URL\"},\"getAliasNameCount(string)\":{\"notice\":\"Returns the alias name count registered in the specific domain\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setDCAddress(address)\":{\"notice\":\"Set the DC contract address\"},\"setRevenueAccount(address)\":{\"notice\":\"Set the revenue account\"},\"setURLUpdatePrice(uint256)\":{\"notice\":\"Set the price for the URL update\"},\"trasnferURLOwnership(string,address)\":{\"notice\":\"Transfer the vanity url ownership to another domain\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"updateURL(string,string,string,uint256)\":{\"notice\":\"Update the existing URL\"},\"withdraw()\":{\"notice\":\"Withdraw funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VanityURL.sol\":\"VanityURL\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/VanityURL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDC.sol\\\";\\n\\ncontract VanityURL is OwnableUpgradeable, PausableUpgradeable {\\n    struct VanityURLInfo {\\n        string vanityURL;\\n        uint256 price;\\n        address owner;\\n    }\\n\\n    /// @dev DC contract\\n    address public dc;\\n\\n    /// @dev DC TokenId -> Alias name list\\n    mapping(bytes32 => string[]) public aliasNames;\\n\\n    /// @dev DC TokenId -> Alias Name -> VanityURLInfo\\n    mapping(bytes32 => mapping(string => VanityURLInfo)) public vanityURLs;\\n\\n    /// @dev Price for the url update\\n    uint256 public urlUpdatePrice;\\n\\n    /// @dev Fee withdrawal address\\n    address public revenueAccount;\\n\\n    event NewURLAdded(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string indexed url,\\n        uint256 price,\\n        address owner\\n    );\\n    event URLDeleted(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string indexed url,\\n        uint256 price,\\n        address owner\\n    );\\n    event URLUpdated(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string oldURL,\\n        string indexed newURL,\\n        uint256 oldPrice,\\n        uint256 newPrice,\\n        address owner\\n    );\\n    event RevenueAccountChanged(address indexed from, address indexed to);\\n\\n    modifier onlyDCOwner(string memory _name) {\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n        require(msg.sender == dcOwner, \\\"VanityURL: only DC owner\\\");\\n        _;\\n    }\\n\\n    modifier whenDomainNotExpired(string memory _name) {\\n        uint256 domainExpireAt = IDC(dc).nameExpires(_name);\\n        require(block.timestamp < domainExpireAt, \\\"VanityURL: expired domain\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _dc, uint256 _urlUpdatePrice, address _revenueAccount) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n\\n        require(_dc != address(0), \\\"VanityURL: zero address\\\");\\n\\n        dc = _dc;\\n        urlUpdatePrice = _urlUpdatePrice;\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Set the DC contract address\\n    /// @param _dc DC contract address\\n    function setDCAddress(address _dc) external onlyOwner {\\n        dc = _dc;\\n    }\\n\\n    /// @notice Set the price for the URL update\\n    /// @param _urlUpdatePrice price for the URL update\\n    function setURLUpdatePrice(uint256 _urlUpdatePrice) external onlyOwner {\\n        urlUpdatePrice = _urlUpdatePrice;\\n    }\\n\\n    /// @notice Set the revenue account\\n    /// @param _revenueAccount revenue account address\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Add a new URL\\n    /// @param _name domain name\\n    /// @param _aliasName alias name for the URL\\n    /// @param _url URL address to be redirected\\n    /// @param _price Price to paid for the URL access\\n    function addNewURL(\\n        string calldata _name,\\n        string calldata _aliasName,\\n        string calldata _url,\\n        uint256 _price\\n    ) external payable whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        VanityURLInfo memory vanityURLInfo = vanityURLs[tokenId][_aliasName];\\n\\n        require(bytes(_aliasName).length <= 1024, \\\"VanityURL: alias too long\\\");\\n        require(bytes(_url).length <= 1024, \\\"VanityURL: url too long\\\");\\n        require(bytes(_aliasName).length != 0, \\\"VanityURL: empty alias\\\");\\n        require(bytes(_url).length != 0, \\\"VanityURL: empty url\\\");\\n\\n        require(bytes(vanityURLInfo.vanityURL).length == 0, \\\"VanityURL: url already exists\\\");\\n        require(msg.value == urlUpdatePrice, \\\"VanityURL: incorrect payment\\\");\\n\\n        // set a new URL\\n        address domainOwner = msg.sender;\\n        aliasNames[tokenId].push(_aliasName);\\n        vanityURLs[tokenId][_aliasName] = VanityURLInfo({vanityURL: _url, price: _price, owner: domainOwner});\\n\\n        emit NewURLAdded(msg.sender, _name, _aliasName, _url, _price, domainOwner);\\n    }\\n\\n    /// @notice Delete the existing URL\\n    /// @dev Deleting the URL is available regardless the domain expiration\\n    /// @param _name domain name\\n    /// @param _aliasName alias name for the URL to delete\\n    function deleteURL(string calldata _name, string calldata _aliasName) external whenNotPaused onlyDCOwner(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        VanityURLInfo memory vanityURLInfo = vanityURLs[tokenId][_aliasName];\\n        address domainOwner = msg.sender;\\n\\n        require(bytes(vanityURLInfo.vanityURL).length != 0, \\\"VanityURL: url does not exist\\\");\\n        require(vanityURLInfo.owner == domainOwner, \\\"VanityURL: only url owner\\\");\\n\\n        emit URLDeleted(\\n            msg.sender,\\n            _name,\\n            _aliasName,\\n            vanityURLInfo.vanityURL,\\n            vanityURLInfo.price,\\n            vanityURLInfo.owner\\n        );\\n\\n        // delete the URL\\n        uint256 aliasNameLen = aliasNames[tokenId].length;\\n        for (uint256 i; i < aliasNameLen; ) {\\n            if (keccak256(abi.encodePacked(aliasNames[tokenId][i])) == keccak256(abi.encodePacked(_aliasName))) {\\n                aliasNames[tokenId][i] = aliasNames[tokenId][aliasNameLen - 1];\\n                aliasNames[tokenId].pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete vanityURLs[tokenId][_aliasName];\\n    }\\n\\n    /// @notice Update the existing URL\\n    /// @dev Updating the URL is not available after the domain is expired\\n    /// @param _name domain name\\n    /// @param _aliasName alias name for the URL\\n    /// @param _url URL address to be redirected\\n    /// @param _price Price to paid for the URL access\\n    function updateURL(\\n        string calldata _name,\\n        string calldata _aliasName,\\n        string calldata _url,\\n        uint256 _price\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        VanityURLInfo storage vanityURLInfo = vanityURLs[tokenId][_aliasName];\\n        address domainOwner = msg.sender;\\n\\n        require(bytes(_aliasName).length <= 1024, \\\"VanityURL: alias too long\\\");\\n        require(bytes(_url).length <= 1024, \\\"VanityURL: url too long\\\");\\n        require(bytes(vanityURLInfo.vanityURL).length != 0, \\\"VanityURL: url does not exist\\\");\\n        require(bytes(_url).length != 0, \\\"VanityURL: empty url\\\");\\n        require(vanityURLInfo.owner == domainOwner, \\\"VanityURL: only url owner\\\");\\n\\n        emit URLUpdated(\\n            msg.sender,\\n            _name,\\n            _aliasName,\\n            vanityURLInfo.vanityURL,\\n            _url,\\n            vanityURLInfo.price,\\n            _price,\\n            domainOwner\\n        );\\n\\n        // update the URL\\n        vanityURLs[tokenId][_aliasName] = VanityURLInfo({vanityURL: _url, price: _price, owner: domainOwner});\\n    }\\n\\n    /// @notice Returns the validity of the vanity URL\\n    /// @param _name domain name\\n    /// @param _aliasName alias name for the URL\\n    function existURL(string memory _name, string memory _aliasName) public view returns (bool) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        VanityURLInfo memory vanityURLInfo = vanityURLs[tokenId][_aliasName];\\n\\n        return bytes(vanityURLInfo.vanityURL).length != 0;\\n    }\\n\\n    /// @notice Returns the alias name count registered in the specific domain\\n    /// @param _name domain name\\n    function getAliasNameCount(string memory _name) external view returns (uint256) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        return aliasNames[tokenId].length;\\n    }\\n\\n    /**\\n     * @notice Transfer the vanity url ownership to another domain\\n     * @param _name domain name to transfer the vanity url ownership\\n     * @param _receiver address to receive the vanity url ownership\\n     */\\n    function trasnferURLOwnership(\\n        string memory _name,\\n        address _receiver\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address sender = msg.sender;\\n\\n        for (uint256 i; i < aliasNames[tokenId].length; ) {\\n            // add vanity urls and alias names to the receiver\\n            string memory aliasName = aliasNames[tokenId][i];\\n            VanityURLInfo storage vanityURLInfo = vanityURLs[tokenId][aliasName];\\n\\n            if (vanityURLInfo.owner == sender) {\\n                vanityURLInfo.owner = _receiver;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw funds\\n    /// @dev Only owner of the revenue account can withdraw funds\\n    function withdraw() external {\\n        require(msg.sender == owner() || msg.sender == revenueAccount, \\\"VanityURL: must be owner or revenue account\\\");\\n        (bool success, ) = revenueAccount.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"VanityURL: failed to withdraw\\\");\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x94ed4d2f97a8790f80b5a5002d5d2c1569045c2bc227088cadd3b461938d58d8\",\"license\":\"MIT\"},\"contracts/interfaces/IDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDC {\\n    function available(string memory) external view returns (bool);\\n\\n    function duration() external view returns (uint256);\\n\\n    function nameExpires(string calldata) external view returns (uint256);\\n\\n    function ownerOf(string calldata name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdbc63234084061220638d43cbb76f114dd1b1737b4b531c84b3156a57db32e88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d3565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000176565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620000ed5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e49190620001b6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015e602783620000ef565b91506200016b8262000100565b604082019050919050565b6000602082019050818103600083015262000191816200014f565b9050919050565b600060ff82169050919050565b620001b08162000198565b82525050565b6000602082019050620001cd6000830184620001a5565b92915050565b6143f480620001e36000396000f3fe6080604052600436106101355760003560e01c80638456cb59116100ab578063d22da0751161006f578063d22da075146103cb578063d8a531a6146103f6578063f2fde38b14610421578063f5b1f6001461044a578063f5dc7d5614610473578063fb0dda4a1461049e57610135565b80638456cb591461031b5780638da5cb5b146103325780639ff410211461035d578063b844704314610379578063c350a1b5146103a257610135565b80633f4ba83a116100fd5780633f4ba83a1461021f5780634d9bf8b3146102365780635551abfd146102735780635c975abb146102b05780635de870c9146102db578063715018a61461030457610135565b806305e66add1461013a57806312a9abec1461017957806330027f3b146101a2578063364d5815146101cb5780633ccfd60b14610208575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190612bdd565b6104c7565b60405161017093929190612d12565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190612d7c565b6105bc565b005b3480156101ae57600080fd5b506101c960048036038101906101c49190612d7c565b610608565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190612da9565b6106d0565b6040516101ff9190612df2565b60405180910390f35b34801561021457600080fd5b5061021d6106fc565b005b34801561022b57600080fd5b5061023461089a565b005b34801561024257600080fd5b5061025d60048036038101906102589190612e39565b6108ac565b60405161026a9190612e79565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190612e9b565b610965565b6040516102a79190612f2e565b60405180910390f35b3480156102bc57600080fd5b506102c5610ab6565b6040516102d29190612f2e565b60405180910390f35b3480156102e757600080fd5b5061030260048036038101906102fd9190612fa9565b610acd565b005b34801561031057600080fd5b506103196110b3565b005b34801561032757600080fd5b506103306110c7565b005b34801561033e57600080fd5b506103476110d9565b604051610354919061302a565b60405180910390f35b61037760048036038101906103729190613045565b611103565b005b34801561038557600080fd5b506103a0600480360381019061039b9190613045565b611872565b005b3480156103ae57600080fd5b506103c960048036038101906103c4919061310e565b611eb3565b005b3480156103d757600080fd5b506103e06120f4565b6040516103ed9190612df2565b60405180910390f35b34801561040257600080fd5b5061040b6120fa565b604051610418919061302a565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612d7c565b612120565b005b34801561045657600080fd5b50610471600480360381019061046c9190613161565b6121a3565b005b34801561047f57600080fd5b506104886121b5565b604051610495919061302a565b60405180910390f35b3480156104aa57600080fd5b506104c560048036038101906104c0919061318e565b6121db565b005b6099602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091505080600001805461050d90613219565b80601f016020809104026020016040519081016040528092919081815260200182805461053990613219565b80156105865780601f1061055b57610100808354040283529160200191610586565b820191906000526020600020905b81548152906001019060200180831161056957829003601f168201915b5050505050908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b6105c46125a9565b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106106125a9565b8073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730760405160405180910390a380609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828051906020012090506098600082815260200190815260200160002080549050915050919050565b6107046110d9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061078a5750609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c0906132bc565b60405180910390fd5b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516108119061330d565b60006040518083038185875af1925050503d806000811461084e576040519150601f19603f3d011682016040523d82523d6000602084013e610853565b606091505b5050905080610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e9061336e565b60405180910390fd5b50565b6108a26125a9565b6108aa612627565b565b609860205281600052604060002081815481106108c857600080fd5b906000526020600020016000915091505080546108e490613219565b80601f016020809104026020016040519081016040528092919081815260200182805461091090613219565b801561095d5780601f106109325761010080835404028352916020019161095d565b820191906000526020600020905b81548152906001019060200180831161094057829003601f168201915b505050505081565b600080838051906020012090506000609960008381526020019081526020016000208460405161099591906133ca565b90815260200160405180910390206040518060600160405290816000820180546109be90613219565b80601f01602080910402602001604051908101604052809291908181526020018280546109ea90613219565b8015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001515114159250505092915050565b6000606560009054906101000a900460ff16905090565b610ad561268a565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b8152600401610b779190612e79565b602060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb891906133f6565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f9061346f565b60405180910390fd5b60008686604051610c3a9291906134b4565b604051809103902090506000609960008381526020019081526020016000208686604051610c699291906134f2565b9081526020016040518091039020604051806060016040529081600082018054610c9290613219565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbe90613219565b8015610d0b5780601f10610ce057610100808354040283529160200191610d0b565b820191906000526020600020905b815481529060010190602001808311610cee57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000339050600082600001515103610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba90613557565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c906135c3565b60405180910390fd5b8160000151604051610e4791906133ca565b60405180910390208787604051610e5f9291906134f2565b60405180910390208a8a604051610e779291906134f2565b60405180910390207fb1ee1c899a9258e000306c3f01cb8a79e82527049a15acd60096763b10a06fec3386602001518760400151604051610eba939291906135e3565b60405180910390a460006098600085815260200190815260200160002080549050905060005b81811015611033578888604051602001610efb9291906134f2565b60405160208183030381529060405280519060200120609860008781526020019081526020016000208281548110610f3657610f3561361a565b5b90600052602060002001604051602001610f5091906136e1565b60405160208183030381529060405280519060200120036110285760986000868152602001908152602001600020600183610f8b9190613727565b81548110610f9c57610f9b61361a565b5b90600052602060002001609860008781526020019081526020016000208281548110610fcb57610fca61361a565b5b906000526020600020019081610fe1919061391d565b506098600086815260200190815260200160002080548061100557611004613a05565b5b60019003818190600052602060002001600061102191906129f0565b9055611033565b806001019050610ee0565b506099600085815260200190815260200160002088886040516110579291906134f2565b90815260200160405180910390206000808201600061107691906129f0565b60018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050505050505050505050565b6110bb6125a9565b6110c560006126d4565b565b6110cf6125a9565b6110d761279a565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61110b61268a565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b81526004016111ad9190612e79565b602060405180830381865afa1580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee91906133f6565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461125e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112559061346f565b60405180910390fd5b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b81526004016113009190612e79565b602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190613a49565b9050804210611385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137c90613ac2565b60405180910390fd5b60008b8b6040516113979291906134b4565b604051809103902090506000609960008381526020019081526020016000208b8b6040516113c69291906134f2565b90815260200160405180910390206040518060600160405290816000820180546113ef90613219565b80601f016020809104026020016040519081016040528092919081815260200182805461141b90613219565b80156114685780601f1061143d57610100808354040283529160200191611468565b820191906000526020600020905b81548152906001019060200180831161144b57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506104008b8b9050111561151b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151290613b2e565b60405180910390fd5b610400898990501115611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a90613b9a565b60405180910390fd5b60008b8b9050036115a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a090613c06565b60405180910390fd5b600089899050036115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e690613c72565b60405180910390fd5b600081600001515114611637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162e90613cde565b60405180910390fd5b609a54341461167b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167290613d4a565b60405180910390fd5b6000339050609860008481526020019081526020016000208c8c909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091826116ce929190613d75565b5060405180606001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018273ffffffffffffffffffffffffffffffffffffffff16815250609960008581526020019081526020016000208d8d6040516117679291906134f2565b9081526020016040518091039020600082015181600001908161178a9190613e45565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505089896040516117ef9291906134f2565b60405180910390208c8c6040516118079291906134f2565b60405180910390208f8f60405161181f9291906134f2565b60405180910390207f665c190e6072b8b1734f933c43409b9313ca34a018a47033475c050506120d6a338c8660405161185a939291906135e3565b60405180910390a45050505050505050505050505050565b61187a61268a565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b815260040161191c9190612e79565b602060405180830381865afa158015611939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195d91906133f6565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c49061346f565b60405180910390fd5b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b8152600401611a6f9190612e79565b602060405180830381865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab09190613a49565b9050804210611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90613ac2565b60405180910390fd5b60008b8b604051611b069291906134b4565b604051809103902090506000609960008381526020019081526020016000208b8b604051611b359291906134f2565b9081526020016040518091039020905060003390506104008c8c90501115611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8990613b2e565b60405180910390fd5b6104008a8a90501115611bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd190613b9a565b60405180910390fd5b6000826000018054611beb90613219565b905003611c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2490613557565b60405180910390fd5b60008a8a905003611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90613c72565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfc906135c3565b60405180910390fd5b8989604051611d159291906134f2565b60405180910390208c8c604051611d2d9291906134f2565b60405180910390208f8f604051611d459291906134f2565b60405180910390207f697ce7dc0089ae803cb0b5d7edc1dad50944af17895e08bd460c86954bc34664338660000187600101548e88604051611d8b959493929190613f9b565b60405180910390a460405180606001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018981526020018273ffffffffffffffffffffffffffffffffffffffff16815250609960008581526020019081526020016000208d8d604051611e2b9291906134f2565b90815260200160405180910390206000820151816000019081611e4e9190613e45565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050505050505050505050505050565b60008060019054906101000a900460ff16159050808015611ee45750600160008054906101000a900460ff1660ff16105b80611f115750611ef3306127fd565b158015611f105750600160008054906101000a900460ff1660ff16145b5b611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4790614067565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611f8d576001600060016101000a81548160ff0219169083151502179055505b611f95612820565b611f9d612879565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361200c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612003906140d3565b60405180910390fd5b83609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609a8190555081609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156120ee5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516120e5919061413b565b60405180910390a15b50505050565b609a5481565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6121286125a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e906141c8565b60405180910390fd5b6121a0816126d4565b50565b6121ab6125a9565b80609a8190555050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6121e361268a565b816000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b81526004016122419190612e79565b602060405180830381865afa15801561225e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228291906133f6565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e99061346f565b60405180910390fd5b836000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b81526004016123509190612e79565b602060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123919190613a49565b90508042106123d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cc90613ac2565b60405180910390fd5b600086805190602001209050600033905060005b609860008481526020019081526020016000208054905081101561259e57600060986000858152602001908152602001600020828154811061242e5761242d61361a565b5b90600052602060002001805461244390613219565b80601f016020809104026020016040519081016040528092919081815260200182805461246f90613219565b80156124bc5780601f10612491576101008083540402835291602001916124bc565b820191906000526020600020905b81548152906001019060200180831161249f57829003601f168201915b50505050509050600060996000868152602001908152602001600020826040516124e691906133ca565b908152602001604051809103902090508373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361259157898160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600101925050506123e9565b505050505050505050565b6125b16128d2565b73ffffffffffffffffffffffffffffffffffffffff166125cf6110d9565b73ffffffffffffffffffffffffffffffffffffffff1614612625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261c90614234565b60405180910390fd5b565b61262f6128da565b6000606560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6126736128d2565b604051612680919061302a565b60405180910390a1565b612692610ab6565b156126d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c9906142a0565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6127a261268a565b6001606560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127e66128d2565b6040516127f3919061302a565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661286f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286690614332565b60405180910390fd5b612877612923565b565b600060019054906101000a900460ff166128c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128bf90614332565b60405180910390fd5b6128d061298f565b565b600033905090565b6128e2610ab6565b612921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129189061439e565b60405180910390fd5b565b600060019054906101000a900460ff16612972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296990614332565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff166129de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d590614332565b60405180910390fd5b6129ee6129e96128d2565b6126d4565b565b5080546129fc90613219565b6000825580601f10612a0e5750612a2d565b601f016020900490600052602060002090810190612a2c9190612a30565b5b50565b5b80821115612a49576000816000905550600101612a31565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612a7481612a61565b8114612a7f57600080fd5b50565b600081359050612a9181612a6b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aea82612aa1565b810181811067ffffffffffffffff82111715612b0957612b08612ab2565b5b80604052505050565b6000612b1c612a4d565b9050612b288282612ae1565b919050565b600067ffffffffffffffff821115612b4857612b47612ab2565b5b612b5182612aa1565b9050602081019050919050565b82818337600083830152505050565b6000612b80612b7b84612b2d565b612b12565b905082815260208101848484011115612b9c57612b9b612a9c565b5b612ba7848285612b5e565b509392505050565b600082601f830112612bc457612bc3612a97565b5b8135612bd4848260208601612b6d565b91505092915050565b60008060408385031215612bf457612bf3612a57565b5b6000612c0285828601612a82565b925050602083013567ffffffffffffffff811115612c2357612c22612a5c565b5b612c2f85828601612baf565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c73578082015181840152602081019050612c58565b60008484015250505050565b6000612c8a82612c39565b612c948185612c44565b9350612ca4818560208601612c55565b612cad81612aa1565b840191505092915050565b6000819050919050565b612ccb81612cb8565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cfc82612cd1565b9050919050565b612d0c81612cf1565b82525050565b60006060820190508181036000830152612d2c8186612c7f565b9050612d3b6020830185612cc2565b612d486040830184612d03565b949350505050565b612d5981612cf1565b8114612d6457600080fd5b50565b600081359050612d7681612d50565b92915050565b600060208284031215612d9257612d91612a57565b5b6000612da084828501612d67565b91505092915050565b600060208284031215612dbf57612dbe612a57565b5b600082013567ffffffffffffffff811115612ddd57612ddc612a5c565b5b612de984828501612baf565b91505092915050565b6000602082019050612e076000830184612cc2565b92915050565b612e1681612cb8565b8114612e2157600080fd5b50565b600081359050612e3381612e0d565b92915050565b60008060408385031215612e5057612e4f612a57565b5b6000612e5e85828601612a82565b9250506020612e6f85828601612e24565b9150509250929050565b60006020820190508181036000830152612e938184612c7f565b905092915050565b60008060408385031215612eb257612eb1612a57565b5b600083013567ffffffffffffffff811115612ed057612ecf612a5c565b5b612edc85828601612baf565b925050602083013567ffffffffffffffff811115612efd57612efc612a5c565b5b612f0985828601612baf565b9150509250929050565b60008115159050919050565b612f2881612f13565b82525050565b6000602082019050612f436000830184612f1f565b92915050565b600080fd5b600080fd5b60008083601f840112612f6957612f68612a97565b5b8235905067ffffffffffffffff811115612f8657612f85612f49565b5b602083019150836001820283011115612fa257612fa1612f4e565b5b9250929050565b60008060008060408587031215612fc357612fc2612a57565b5b600085013567ffffffffffffffff811115612fe157612fe0612a5c565b5b612fed87828801612f53565b9450945050602085013567ffffffffffffffff8111156130105761300f612a5c565b5b61301c87828801612f53565b925092505092959194509250565b600060208201905061303f6000830184612d03565b92915050565b60008060008060008060006080888a03121561306457613063612a57565b5b600088013567ffffffffffffffff81111561308257613081612a5c565b5b61308e8a828b01612f53565b9750975050602088013567ffffffffffffffff8111156130b1576130b0612a5c565b5b6130bd8a828b01612f53565b9550955050604088013567ffffffffffffffff8111156130e0576130df612a5c565b5b6130ec8a828b01612f53565b935093505060606130ff8a828b01612e24565b91505092959891949750929550565b60008060006060848603121561312757613126612a57565b5b600061313586828701612d67565b935050602061314686828701612e24565b925050604061315786828701612d67565b9150509250925092565b60006020828403121561317757613176612a57565b5b600061318584828501612e24565b91505092915050565b600080604083850312156131a5576131a4612a57565b5b600083013567ffffffffffffffff8111156131c3576131c2612a5c565b5b6131cf85828601612baf565b92505060206131e085828601612d67565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061323157607f821691505b602082108103613244576132436131ea565b5b50919050565b7f56616e69747955524c3a206d757374206265206f776e6572206f72207265766560008201527f6e7565206163636f756e74000000000000000000000000000000000000000000602082015250565b60006132a6602b83612c44565b91506132b18261324a565b604082019050919050565b600060208201905081810360008301526132d581613299565b9050919050565b600081905092915050565b50565b60006132f76000836132dc565b9150613302826132e7565b600082019050919050565b6000613318826132ea565b9150819050919050565b7f56616e69747955524c3a206661696c656420746f207769746864726177000000600082015250565b6000613358601d83612c44565b915061336382613322565b602082019050919050565b600060208201905081810360008301526133878161334b565b9050919050565b600081905092915050565b60006133a482612c39565b6133ae818561338e565b93506133be818560208601612c55565b80840191505092915050565b60006133d68284613399565b915081905092915050565b6000815190506133f081612d50565b92915050565b60006020828403121561340c5761340b612a57565b5b600061341a848285016133e1565b91505092915050565b7f56616e69747955524c3a206f6e6c79204443206f776e65720000000000000000600082015250565b6000613459601883612c44565b915061346482613423565b602082019050919050565b600060208201905081810360008301526134888161344c565b9050919050565b600061349b83856132dc565b93506134a8838584612b5e565b82840190509392505050565b60006134c182848661348f565b91508190509392505050565b60006134d9838561338e565b93506134e6838584612b5e565b82840190509392505050565b60006134ff8284866134cd565b91508190509392505050565b7f56616e69747955524c3a2075726c20646f6573206e6f74206578697374000000600082015250565b6000613541601d83612c44565b915061354c8261350b565b602082019050919050565b6000602082019050818103600083015261357081613534565b9050919050565b7f56616e69747955524c3a206f6e6c792075726c206f776e657200000000000000600082015250565b60006135ad601983612c44565b91506135b882613577565b602082019050919050565b600060208201905081810360008301526135dc816135a0565b9050919050565b60006060820190506135f86000830186612d03565b6136056020830185612cc2565b6136126040830184612d03565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b6000815461366b81613219565b613675818661338e565b9450600182166000811461369057600181146136a5576136d8565b60ff19831686528115158202860193506136d8565b6136ae85613649565b60005b838110156136d0578154818901526001820191506020810190506136b1565b838801955050505b50505092915050565b60006136ed828461365e565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061373282612cb8565b915061373d83612cb8565b9250828203905081811115613755576137546136f8565b5b92915050565b60008154905061376a81613219565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137d37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613796565b6137dd8683613796565b95508019841693508086168417925050509392505050565b6000819050919050565b600061381a61381561381084612cb8565b6137f5565b612cb8565b9050919050565b6000819050919050565b613834836137ff565b61384861384082613821565b8484546137a3565b825550505050565b600090565b61385d613850565b61386881848461382b565b505050565b5b8181101561388c57613881600082613855565b60018101905061386e565b5050565b601f8211156138d1576138a281613649565b6138ab84613786565b810160208510156138ba578190505b6138ce6138c685613786565b83018261386d565b50505b505050565b600082821c905092915050565b60006138f4600019846008026138d6565b1980831691505092915050565b600061390d83836138e3565b9150826002028217905092915050565b81810361392b575050613a03565b6139348261375b565b67ffffffffffffffff81111561394d5761394c612ab2565b5b6139578254613219565b613962828285613890565b6000601f831160018114613991576000841561397f578287015490505b6139898582613901565b8655506139fc565b601f19841661399f87613771565b96506139aa86613649565b60005b828110156139d2578489015482556001820191506001850194506020810190506139ad565b868310156139ef57848901546139eb601f8916826138e3565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050613a4381612e0d565b92915050565b600060208284031215613a5f57613a5e612a57565b5b6000613a6d84828501613a34565b91505092915050565b7f56616e69747955524c3a206578706972656420646f6d61696e00000000000000600082015250565b6000613aac601983612c44565b9150613ab782613a76565b602082019050919050565b60006020820190508181036000830152613adb81613a9f565b9050919050565b7f56616e69747955524c3a20616c69617320746f6f206c6f6e6700000000000000600082015250565b6000613b18601983612c44565b9150613b2382613ae2565b602082019050919050565b60006020820190508181036000830152613b4781613b0b565b9050919050565b7f56616e69747955524c3a2075726c20746f6f206c6f6e67000000000000000000600082015250565b6000613b84601783612c44565b9150613b8f82613b4e565b602082019050919050565b60006020820190508181036000830152613bb381613b77565b9050919050565b7f56616e69747955524c3a20656d70747920616c69617300000000000000000000600082015250565b6000613bf0601683612c44565b9150613bfb82613bba565b602082019050919050565b60006020820190508181036000830152613c1f81613be3565b9050919050565b7f56616e69747955524c3a20656d7074792075726c000000000000000000000000600082015250565b6000613c5c601483612c44565b9150613c6782613c26565b602082019050919050565b60006020820190508181036000830152613c8b81613c4f565b9050919050565b7f56616e69747955524c3a2075726c20616c726561647920657869737473000000600082015250565b6000613cc8601d83612c44565b9150613cd382613c92565b602082019050919050565b60006020820190508181036000830152613cf781613cbb565b9050919050565b7f56616e69747955524c3a20696e636f7272656374207061796d656e7400000000600082015250565b6000613d34601c83612c44565b9150613d3f82613cfe565b602082019050919050565b60006020820190508181036000830152613d6381613d27565b9050919050565b600082905092915050565b613d7f8383613d6a565b67ffffffffffffffff811115613d9857613d97612ab2565b5b613da28254613219565b613dad828285613890565b6000601f831160018114613ddc5760008415613dca578287013590505b613dd48582613901565b865550613e3c565b601f198416613dea86613649565b60005b82811015613e1257848901358255600182019150602085019450602081019050613ded565b86831015613e2f5784890135613e2b601f8916826138e3565b8355505b6001600288020188555050505b50505050505050565b613e4e82612c39565b67ffffffffffffffff811115613e6757613e66612ab2565b5b613e718254613219565b613e7c828285613890565b600060209050601f831160018114613eaf5760008415613e9d578287015190505b613ea78582613901565b865550613f0f565b601f198416613ebd86613649565b60005b82811015613ee557848901518255600182019150602085019450602081019050613ec0565b86831015613f025784890151613efe601f8916826138e3565b8355505b6001600288020188555050505b505050505050565b60008154613f2481613219565b613f2e8186612c44565b94506001821660008114613f495760018114613f5f57613f92565b60ff198316865281151560200286019350613f92565b613f6885613649565b60005b83811015613f8a57815481890152600182019150602081019050613f6b565b808801955050505b50505092915050565b600060a082019050613fb06000830188612d03565b8181036020830152613fc28187613f17565b9050613fd16040830186612cc2565b613fde6060830185612cc2565b613feb6080830184612d03565b9695505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614051602e83612c44565b915061405c82613ff5565b604082019050919050565b6000602082019050818103600083015261408081614044565b9050919050565b7f56616e69747955524c3a207a65726f2061646472657373000000000000000000600082015250565b60006140bd601783612c44565b91506140c882614087565b602082019050919050565b600060208201905081810360008301526140ec816140b0565b9050919050565b6000819050919050565b600060ff82169050919050565b600061412561412061411b846140f3565b6137f5565b6140fd565b9050919050565b6141358161410a565b82525050565b6000602082019050614150600083018461412c565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006141b2602683612c44565b91506141bd82614156565b604082019050919050565b600060208201905081810360008301526141e1816141a5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061421e602083612c44565b9150614229826141e8565b602082019050919050565b6000602082019050818103600083015261424d81614211565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061428a601083612c44565b915061429582614254565b602082019050919050565b600060208201905081810360008301526142b98161427d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061431c602b83612c44565b9150614327826142c0565b604082019050919050565b6000602082019050818103600083015261434b8161430f565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614388601483612c44565b915061439382614352565b602082019050919050565b600060208201905081810360008301526143b78161437b565b905091905056fea2646970667358221220300113d03da8065996b9df589f5671230e13e7bdc8cee2497a63269f40a92a8e64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewURL(string,string,string,uint256)": {
        "params": {
          "_aliasName": "alias name for the URL",
          "_name": "domain name",
          "_price": "Price to paid for the URL access",
          "_url": "URL address to be redirected"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deleteURL(string,string)": {
        "details": "Deleting the URL is available regardless the domain expiration",
        "params": {
          "_aliasName": "alias name for the URL to delete",
          "_name": "domain name"
        }
      },
      "existURL(string,string)": {
        "params": {
          "_aliasName": "alias name for the URL",
          "_name": "domain name"
        }
      },
      "getAliasNameCount(string)": {
        "params": {
          "_name": "domain name"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDCAddress(address)": {
        "params": {
          "_dc": "DC contract address"
        }
      },
      "setRevenueAccount(address)": {
        "params": {
          "_revenueAccount": "revenue account address"
        }
      },
      "setURLUpdatePrice(uint256)": {
        "params": {
          "_urlUpdatePrice": "price for the URL update"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "trasnferURLOwnership(string,address)": {
        "params": {
          "_name": "domain name to transfer the vanity url ownership",
          "_receiver": "address to receive the vanity url ownership"
        }
      },
      "updateURL(string,string,string,uint256)": {
        "details": "Updating the URL is not available after the domain is expired",
        "params": {
          "_aliasName": "alias name for the URL",
          "_name": "domain name",
          "_price": "Price to paid for the URL access",
          "_url": "URL address to be redirected"
        }
      },
      "withdraw()": {
        "details": "Only owner of the revenue account can withdraw funds"
      }
    },
    "stateVariables": {
      "aliasNames": {
        "details": "DC TokenId -> Alias name list"
      },
      "dc": {
        "details": "DC contract"
      },
      "revenueAccount": {
        "details": "Fee withdrawal address"
      },
      "urlUpdatePrice": {
        "details": "Price for the url update"
      },
      "vanityURLs": {
        "details": "DC TokenId -> Alias Name -> VanityURLInfo"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewURL(string,string,string,uint256)": {
        "notice": "Add a new URL"
      },
      "deleteURL(string,string)": {
        "notice": "Delete the existing URL"
      },
      "existURL(string,string)": {
        "notice": "Returns the validity of the vanity URL"
      },
      "getAliasNameCount(string)": {
        "notice": "Returns the alias name count registered in the specific domain"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setDCAddress(address)": {
        "notice": "Set the DC contract address"
      },
      "setRevenueAccount(address)": {
        "notice": "Set the revenue account"
      },
      "setURLUpdatePrice(uint256)": {
        "notice": "Set the price for the URL update"
      },
      "trasnferURLOwnership(string,address)": {
        "notice": "Transfer the vanity url ownership to another domain"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "updateURL(string,string,string,uint256)": {
        "notice": "Update the existing URL"
      },
      "withdraw()": {
        "notice": "Withdraw funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 772,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "dc",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 778,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "aliasNames",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 786,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "vanityURLs",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(VanityURLInfo)769_storage))"
      },
      {
        "astId": 789,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "urlUpdatePrice",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 792,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(VanityURLInfo)769_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => struct VanityURL.VanityURLInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(VanityURLInfo)769_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(VanityURLInfo)769_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VanityURL.VanityURLInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VanityURLInfo)769_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VanityURLInfo)769_storage": {
        "encoding": "inplace",
        "label": "struct VanityURL.VanityURLInfo",
        "members": [
          {
            "astId": 764,
            "contract": "contracts/VanityURL.sol:VanityURL",
            "label": "vanityURL",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 766,
            "contract": "contracts/VanityURL.sol:VanityURL",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 768,
            "contract": "contracts/VanityURL.sol:VanityURL",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}