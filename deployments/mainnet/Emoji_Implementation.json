{
  "address": "0xE2DcF1C5B22Fb2250eC3440Bc3C6Cc4e1947d817",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Emoji.EmojiType",
          "name": "emojiType",
          "type": "uint8"
        }
      ],
      "name": "EmojiReactionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "enum Emoji.EmojiType",
          "name": "_emojiType",
          "type": "uint8"
        }
      ],
      "name": "addEmojiReaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum Emoji.EmojiType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "emojiReactionCounters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Emoji.EmojiType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "emojiReactionPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emojiReactions",
      "outputs": [
        {
          "internalType": "enum Emoji.EmojiType",
          "name": "emojiType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getEmojiReactions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Emoji.EmojiType",
              "name": "emojiType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Emoji.EmojiInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dc",
          "type": "address"
        }
      ],
      "name": "setDCAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Emoji.EmojiType",
          "name": "_emojiType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setEmojiReactionPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "transferEmojiReactions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x84b966816132b2f52bf28c84df28069631da7f7904a4be25bb39a7016bd11f4f",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0xE2DcF1C5B22Fb2250eC3440Bc3C6Cc4e1947d817",
    "transactionIndex": 3,
    "gasUsed": "2368184",
    "logsBloom": "0x
    "blockHash": "0xe7ccb66f5723477471306805cc137ebf4910dac4e518aea9d99557ff5b996480",
    "transactionHash": "0x84b966816132b2f52bf28c84df28069631da7f7904a4be25bb39a7016bd11f4f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40770387,
        "transactionHash": "0x84b966816132b2f52bf28c84df28069631da7f7904a4be25bb39a7016bd11f4f",
        "address": "0xE2DcF1C5B22Fb2250eC3440Bc3C6Cc4e1947d817",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0xe7ccb66f5723477471306805cc137ebf4910dac4e518aea9d99557ff5b996480"
      }
    ],
    "blockNumber": 40770387,
    "cumulativeGasUsed": "2484168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dfe4851246dbbb842cb85da7d8ae56fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"emojiType\",\"type\":\"uint8\"}],\"name\":\"EmojiReactionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"_emojiType\",\"type\":\"uint8\"}],\"name\":\"addEmojiReaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"emojiReactionCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"emojiReactionPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emojiReactions\",\"outputs\":[{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"emojiType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getEmojiReactions\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"emojiType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Emoji.EmojiInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dc\",\"type\":\"address\"}],\"name\":\"setDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Emoji.EmojiType\",\"name\":\"_emojiType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setEmojiReactionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"transferEmojiReactions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addEmojiReaction(string,uint8)\":{\"params\":{\"_emojiType\":\"emoji type to add\",\"_name\":\"domain name to add the emoji reaction\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getEmojiReactions(string)\":{\"params\":{\"_name\":\"domain name to check\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDCAddress(address)\":{\"params\":{\"_dc\":\"DC contract address\"}},\"setEmojiReactionPrice(uint8,uint256)\":{\"params\":{\"_emojiType\":\"emoji type\",\"_price\":\"price for the emoji reaction addition\"}},\"setRevenueAccount(address)\":{\"params\":{\"_revenueAccount\":\"revenue account address\"}},\"transferEmojiReactions(string,address)\":{\"params\":{\"_name\":\"domain name to trasnfer the emoji reactions\",\"_receiver\":\"address to receive the emoji reactions\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Only owner of the revenue account can withdraw funds\"}},\"stateVariables\":{\"dc\":{\"details\":\"DC contract\"},\"emojiReactionCounters\":{\"details\":\"DC TokenId -> Owner -> EmojiType -> Emoji reaction counter\"},\"emojiReactionPrices\":{\"details\":\"Emoji Type -> Price\"},\"emojiReactions\":{\"details\":\"DC TokenId -> EmojiInfo list\"},\"revenueAccount\":{\"details\":\"Revenue account\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addEmojiReaction(string,uint8)\":{\"notice\":\"Add the emoji reaction\"},\"getEmojiReactions(string)\":{\"notice\":\"Returns all the emoji reactions added to the specific domain\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setDCAddress(address)\":{\"notice\":\"Set the DC contract address\"},\"setEmojiReactionPrice(uint8,uint256)\":{\"notice\":\"Set the price of each emoji reaction\"},\"setRevenueAccount(address)\":{\"notice\":\"Set the revenue account\"},\"transferEmojiReactions(string,address)\":{\"notice\":\"Transfer the emoji reactions to another address\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"withdraw()\":{\"notice\":\"Withdraw funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Emoji.sol\":\"Emoji\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Emoji.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDC.sol\\\";\\n\\ncontract Emoji is OwnableUpgradeable, PausableUpgradeable {\\n    // Enum for the emoji reactions\\n    enum EmojiType {\\n        ONE_ABOVE,\\n        FIRST_PRIZE,\\n        ONE_HUNDRED_PERCENT\\n    }\\n\\n    struct EmojiInfo {\\n        EmojiType emojiType;\\n        address owner;\\n    }\\n\\n    /// @dev DC contract\\n    address public dc;\\n\\n    /// @dev DC TokenId -> EmojiInfo list\\n    mapping(bytes32 => EmojiInfo[]) public emojiReactions;\\n\\n    /// @dev DC TokenId -> Owner -> EmojiType -> Emoji reaction counter\\n    mapping(bytes32 => mapping(address => mapping(EmojiType => uint256))) public emojiReactionCounters;\\n\\n    /// @dev Emoji Type -> Price\\n    mapping(EmojiType => uint256) public emojiReactionPrices;\\n\\n    /// @dev Revenue account\\n    address public revenueAccount;\\n\\n    event EmojiReactionAdded(address indexed by, string indexed name, address indexed owner, EmojiType emojiType);\\n    event RevenueAccountChanged(address indexed from, address indexed to);\\n\\n    modifier onlyDCOwner(string memory _name) {\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n        require(msg.sender == dcOwner, \\\"Emoji: only DC owner\\\");\\n        _;\\n    }\\n\\n    modifier whenDomainNotExpired(string memory _name) {\\n        uint256 domainExpireAt = IDC(dc).nameExpires(_name);\\n        require(block.timestamp < domainExpireAt, \\\"Emoji: expired domain\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _dc, address _revenueAccount) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n\\n        require(_dc != address(0), \\\"Emoji: zero address\\\");\\n\\n        dc = _dc;\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Set the DC contract address\\n    /// @param _dc DC contract address\\n    function setDCAddress(address _dc) external onlyOwner {\\n        dc = _dc;\\n    }\\n\\n    /// @notice Set the price of each emoji reaction\\n    /// @param _emojiType emoji type\\n    /// @param _price price for the emoji reaction addition\\n    function setEmojiReactionPrice(EmojiType _emojiType, uint256 _price) external onlyOwner {\\n        emojiReactionPrices[_emojiType] = _price;\\n    }\\n\\n    /// @notice Set the revenue account\\n    /// @param _revenueAccount revenue account address\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    /// @notice Add the emoji reaction\\n    /// @param _name domain name to add the emoji reaction\\n    /// @param _emojiType emoji type to add\\n    function addEmojiReaction(\\n        string memory _name,\\n        EmojiType _emojiType\\n    ) external payable whenNotPaused whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address dcOwner = IDC(dc).ownerOf(_name);\\n\\n        require(msg.value == emojiReactionPrices[_emojiType], \\\"Emoji: incorrect payment\\\");\\n\\n        EmojiInfo memory emojiInfo = EmojiInfo({emojiType: _emojiType, owner: dcOwner});\\n        emojiReactions[tokenId].push(emojiInfo);\\n        ++emojiReactionCounters[tokenId][dcOwner][_emojiType];\\n    }\\n\\n    /// @notice Transfer the emoji reactions to another address\\n    /// @param _name domain name to trasnfer the emoji reactions\\n    /// @param _receiver address to receive the emoji reactions\\n    function transferEmojiReactions(\\n        string memory _name,\\n        address _receiver\\n    ) external whenNotPaused onlyDCOwner(_name) whenDomainNotExpired(_name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        address sender = msg.sender;\\n\\n        // transfer the emoji reactions\\n        uint256 emojiTypeCount = uint256(type(EmojiType).max);\\n        uint256[] memory countersToTrasnfer = new uint256[](emojiTypeCount);\\n        for (uint256 i = 0; i < emojiReactions[tokenId].length; ) {\\n            EmojiInfo storage emojiInfo = emojiReactions[tokenId][i];\\n\\n            if (emojiInfo.owner == sender) {\\n                emojiInfo.owner = _receiver;\\n                ++countersToTrasnfer[uint256(emojiInfo.emojiType)];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // update the emoji reaction counters\\n        for (uint256 i = 0; i < emojiTypeCount; ) {\\n            uint256 currentEmojiType = i;\\n            emojiReactionCounters[tokenId][sender][EmojiType(currentEmojiType)] -= countersToTrasnfer[currentEmojiType];\\n            emojiReactionCounters[tokenId][_receiver][EmojiType(currentEmojiType)] += countersToTrasnfer[\\n                currentEmojiType\\n            ];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns all the emoji reactions added to the specific domain\\n    /// @param _name domain name to check\\n    function getEmojiReactions(string memory _name) external view returns (EmojiInfo[] memory) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        return emojiReactions[tokenId];\\n    }\\n\\n    /// @notice Withdraw funds\\n    /// @dev Only owner of the revenue account can withdraw funds\\n    function withdraw() external {\\n        require(msg.sender == owner() || msg.sender == revenueAccount, \\\"Emoji: must be owner or revenue account\\\");\\n        (bool success, ) = revenueAccount.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Emoji: failed to withdraw\\\");\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x5df347c70999c4ab7d77e74b29dd3814f43853830b0b10c5bcd46c4b64e96715\",\"license\":\"MIT\"},\"contracts/interfaces/IDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IDC {\\n    function available(string memory) external view returns (bool);\\n\\n    function duration() external view returns (uint256);\\n\\n    function nameExpires(string calldata) external view returns (uint256);\\n\\n    function ownerOf(string calldata name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdbc63234084061220638d43cbb76f114dd1b1737b4b531c84b3156a57db32e88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d3565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000176565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620000ed5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e49190620001b6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015e602783620000ef565b91506200016b8262000100565b604082019050919050565b6000602082019050818103600083015262000191816200014f565b9050919050565b600060ff82169050919050565b620001b08162000198565b82525050565b6000602082019050620001cd6000830184620001a5565b92915050565b61298480620001e36000396000f3fe6080604052600436106101145760003560e01c80638456cb59116100a0578063c3ce491d11610064578063c3ce491d14610343578063d8a531a61461036c578063d8befc4814610397578063f2fde38b146103d4578063f5dc7d56146103fd57610114565b80638456cb591461025e5780638da5cb5b1461027557806399b762ec146102a0578063b2526244146102dd578063c22a31011461030657610114565b8063485cc955116100e7578063485cc955146101995780635b8e99dc146101c25780635c975abb146101de578063715018a61461020957806381e19d311461022057610114565b806312a9abec1461011957806330027f3b146101425780633ccfd60b1461016b5780633f4ba83a14610182575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611a33565b610428565b005b34801561014e57600080fd5b5061016960048036038101906101649190611a33565b610474565b005b34801561017757600080fd5b5061018061053c565b005b34801561018e57600080fd5b506101976106da565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190611a60565b6106ec565b005b6101dc60048036038101906101d79190611c0b565b610925565b005b3480156101ea57600080fd5b506101f3610cca565b6040516102009190611c82565b60405180910390f35b34801561021557600080fd5b5061021e610ce1565b005b34801561022c57600080fd5b5061024760048036038101906102429190611d09565b610cf5565b604051610255929190611dcf565b60405180910390f35b34801561026a57600080fd5b50610273610d5f565b005b34801561028157600080fd5b5061028a610d71565b6040516102979190611df8565b60405180910390f35b3480156102ac57600080fd5b506102c760048036038101906102c29190611e13565b610d9b565b6040516102d49190611e75565b60405180910390f35b3480156102e957600080fd5b5061030460048036038101906102ff9190611e90565b610dcd565b005b34801561031257600080fd5b5061032d60048036038101906103289190611ed0565b610e15565b60405161033a9190611e75565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190611efd565b610e2d565b005b34801561037857600080fd5b5061038161139f565b60405161038e9190611df8565b60405180910390f35b3480156103a357600080fd5b506103be60048036038101906103b99190611f59565b6113c5565b6040516103cb919061209e565b60405180910390f35b3480156103e057600080fd5b506103fb60048036038101906103f69190611a33565b6114d1565b005b34801561040957600080fd5b50610412611554565b60405161041f9190611df8565b60405180910390f35b61043061157a565b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61047c61157a565b8073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730760405160405180910390a380609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610544610d71565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105ca5750609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060090612143565b60405180910390fd5b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161065190612194565b60006040518083038185875af1925050503d806000811461068e576040519150601f19603f3d011682016040523d82523d6000602084013e610693565b606091505b50509050806106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce906121f5565b60405180910390fd5b50565b6106e261157a565b6106ea6115f8565b565b60008060019054906101000a900460ff1615905080801561071d5750600160008054906101000a900460ff1660ff16105b8061074a575061072c3061165b565b1580156107495750600160008054906101000a900460ff1660ff16145b5b610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090612287565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156107c6576001600060016101000a81548160ff0219169083151502179055505b6107ce61167e565b6107d66116d7565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c906122f3565b60405180910390fd5b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156109205760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109179190612365565b60405180910390a15b505050565b61092d611730565b816000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b815260040161098b91906123ee565b602060405180830381865afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190612425565b9050804210610a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a079061249e565b60405180910390fd5b6000848051906020012090506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26876040518263ffffffff1660e01b8152600401610a7991906123ee565b602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba91906124d3565b9050609a6000866002811115610ad357610ad2611d49565b5b6002811115610ae557610ae4611d49565b5b8152602001908152602001600020543414610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c9061254c565b60405180910390fd5b60006040518060400160405280876002811115610b5557610b54611d49565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815250905060986000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff02191690836002811115610bda57610bd9611d49565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506099600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876002811115610c8d57610c8c611d49565b5b6002811115610c9f57610c9e611d49565b5b815260200190815260200160002060008154610cba9061259b565b9190508190555050505050505050565b6000606560009054906101000a900460ff16905090565b610ce961157a565b610cf3600061177a565b565b60986020528160005260406000208181548110610d1157600080fd5b90600052602060002001600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b610d6761157a565b610d6f611840565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609960205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b610dd561157a565b80609a6000846002811115610ded57610dec611d49565b5b6002811115610dff57610dfe611d49565b5b8152602001908152602001600020819055505050565b609a6020528060005260406000206000915090505481565b610e35611730565b816000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b8152600401610e9391906123ee565b602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed491906124d3565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b9061262f565b60405180910390fd5b836000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b8152600401610fa291906123ee565b602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190612425565b9050804210611027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101e9061249e565b60405180910390fd5b6000868051906020012090506000339050600060028081111561104d5761104c611d49565b5b905060008167ffffffffffffffff81111561106b5761106a611abb565b5b6040519080825280602002602001820160405280156110995781602001602082028036833780820191505090505b50905060005b60986000868152602001908152602001600020805490508110156111e55760006098600087815260200190815260200160002082815481106110e4576110e361264f565b5b9060005260206000200190508473ffffffffffffffffffffffffffffffffffffffff168160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111d9578a8160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160000160009054906101000a900460ff1660028111156111af576111ae611d49565b5b815181106111c0576111bf61264f565b5b6020026020010180516111d29061259b565b9081815250505b8160010191505061109f565b5060005b828110156113925760008190508281815181106112095761120861264f565b5b60200260200101516099600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600281111561127657611275611d49565b5b600281111561128857611287611d49565b5b600281111561129a57611299611d49565b5b815260200190815260200160002060008282546112b7919061267e565b925050819055508281815181106112d1576112d061264f565b5b60200260200101516099600088815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600281111561133e5761133d611d49565b5b60028111156113505761134f611d49565b5b600281111561136257611361611d49565b5b8152602001908152602001600020600082825461137f91906126b2565b92505081905550816001019150506111e9565b5050505050505050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008280519060200120905060986000828152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114c5578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600281111561144a57611449611d49565b5b600281111561145c5761145b611d49565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611406565b50505050915050919050565b6114d961157a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153f90612758565b60405180910390fd5b6115518161177a565b50565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115826118a3565b73ffffffffffffffffffffffffffffffffffffffff166115a0610d71565b73ffffffffffffffffffffffffffffffffffffffff16146115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed906127c4565b60405180910390fd5b565b6116006118ab565b6000606560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116446118a3565b6040516116519190611df8565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c490612856565b60405180910390fd5b6116d56118f4565b565b600060019054906101000a900460ff16611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171d90612856565b60405180910390fd5b61172e611960565b565b611738610cca565b15611778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176f906128c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611848611730565b6001606560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861188c6118a3565b6040516118999190611df8565b60405180910390a1565b600033905090565b6118b3610cca565b6118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e99061292e565b60405180910390fd5b565b600060019054906101000a900460ff16611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193a90612856565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff166119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a690612856565b60405180910390fd5b6119bf6119ba6118a3565b61177a565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a00826119d5565b9050919050565b611a10816119f5565b8114611a1b57600080fd5b50565b600081359050611a2d81611a07565b92915050565b600060208284031215611a4957611a486119cb565b5b6000611a5784828501611a1e565b91505092915050565b60008060408385031215611a7757611a766119cb565b5b6000611a8585828601611a1e565b9250506020611a9685828601611a1e565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611af382611aaa565b810181811067ffffffffffffffff82111715611b1257611b11611abb565b5b80604052505050565b6000611b256119c1565b9050611b318282611aea565b919050565b600067ffffffffffffffff821115611b5157611b50611abb565b5b611b5a82611aaa565b9050602081019050919050565b82818337600083830152505050565b6000611b89611b8484611b36565b611b1b565b905082815260208101848484011115611ba557611ba4611aa5565b5b611bb0848285611b67565b509392505050565b600082601f830112611bcd57611bcc611aa0565b5b8135611bdd848260208601611b76565b91505092915050565b60038110611bf357600080fd5b50565b600081359050611c0581611be6565b92915050565b60008060408385031215611c2257611c216119cb565b5b600083013567ffffffffffffffff811115611c4057611c3f6119d0565b5b611c4c85828601611bb8565b9250506020611c5d85828601611bf6565b9150509250929050565b60008115159050919050565b611c7c81611c67565b82525050565b6000602082019050611c976000830184611c73565b92915050565b6000819050919050565b611cb081611c9d565b8114611cbb57600080fd5b50565b600081359050611ccd81611ca7565b92915050565b6000819050919050565b611ce681611cd3565b8114611cf157600080fd5b50565b600081359050611d0381611cdd565b92915050565b60008060408385031215611d2057611d1f6119cb565b5b6000611d2e85828601611cbe565b9250506020611d3f85828601611cf4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611d8957611d88611d49565b5b50565b6000819050611d9a82611d78565b919050565b6000611daa82611d8c565b9050919050565b611dba81611d9f565b82525050565b611dc9816119f5565b82525050565b6000604082019050611de46000830185611db1565b611df16020830184611dc0565b9392505050565b6000602082019050611e0d6000830184611dc0565b92915050565b600080600060608486031215611e2c57611e2b6119cb565b5b6000611e3a86828701611cbe565b9350506020611e4b86828701611a1e565b9250506040611e5c86828701611bf6565b9150509250925092565b611e6f81611cd3565b82525050565b6000602082019050611e8a6000830184611e66565b92915050565b60008060408385031215611ea757611ea66119cb565b5b6000611eb585828601611bf6565b9250506020611ec685828601611cf4565b9150509250929050565b600060208284031215611ee657611ee56119cb565b5b6000611ef484828501611bf6565b91505092915050565b60008060408385031215611f1457611f136119cb565b5b600083013567ffffffffffffffff811115611f3257611f316119d0565b5b611f3e85828601611bb8565b9250506020611f4f85828601611a1e565b9150509250929050565b600060208284031215611f6f57611f6e6119cb565b5b600082013567ffffffffffffffff811115611f8d57611f8c6119d0565b5b611f9984828501611bb8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611fd781611d9f565b82525050565b611fe6816119f5565b82525050565b6040820160008201516120026000850182611fce565b5060208201516120156020850182611fdd565b50505050565b60006120278383611fec565b60408301905092915050565b6000602082019050919050565b600061204b82611fa2565b6120558185611fad565b935061206083611fbe565b8060005b83811015612091578151612078888261201b565b975061208383612033565b925050600181019050612064565b5085935050505092915050565b600060208201905081810360008301526120b88184612040565b905092915050565b600082825260208201905092915050565b7f456d6f6a693a206d757374206265206f776e6572206f7220726576656e75652060008201527f6163636f756e7400000000000000000000000000000000000000000000000000602082015250565b600061212d6027836120c0565b9150612138826120d1565b604082019050919050565b6000602082019050818103600083015261215c81612120565b9050919050565b600081905092915050565b50565b600061217e600083612163565b91506121898261216e565b600082019050919050565b600061219f82612171565b9150819050919050565b7f456d6f6a693a206661696c656420746f20776974686472617700000000000000600082015250565b60006121df6019836120c0565b91506121ea826121a9565b602082019050919050565b6000602082019050818103600083015261220e816121d2565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612271602e836120c0565b915061227c82612215565b604082019050919050565b600060208201905081810360008301526122a081612264565b9050919050565b7f456d6f6a693a207a65726f206164647265737300000000000000000000000000600082015250565b60006122dd6013836120c0565b91506122e8826122a7565b602082019050919050565b6000602082019050818103600083015261230c816122d0565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061234f61234a61234584612313565b61232a565b61231d565b9050919050565b61235f81612334565b82525050565b600060208201905061237a6000830184612356565b92915050565b600081519050919050565b60005b838110156123a957808201518184015260208101905061238e565b60008484015250505050565b60006123c082612380565b6123ca81856120c0565b93506123da81856020860161238b565b6123e381611aaa565b840191505092915050565b6000602082019050818103600083015261240881846123b5565b905092915050565b60008151905061241f81611cdd565b92915050565b60006020828403121561243b5761243a6119cb565b5b600061244984828501612410565b91505092915050565b7f456d6f6a693a206578706972656420646f6d61696e0000000000000000000000600082015250565b60006124886015836120c0565b915061249382612452565b602082019050919050565b600060208201905081810360008301526124b78161247b565b9050919050565b6000815190506124cd81611a07565b92915050565b6000602082840312156124e9576124e86119cb565b5b60006124f7848285016124be565b91505092915050565b7f456d6f6a693a20696e636f7272656374207061796d656e740000000000000000600082015250565b60006125366018836120c0565b915061254182612500565b602082019050919050565b6000602082019050818103600083015261256581612529565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125a682611cd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d8576125d761256c565b5b600182019050919050565b7f456d6f6a693a206f6e6c79204443206f776e6572000000000000000000000000600082015250565b60006126196014836120c0565b9150612624826125e3565b602082019050919050565b600060208201905081810360008301526126488161260c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061268982611cd3565b915061269483611cd3565b92508282039050818111156126ac576126ab61256c565b5b92915050565b60006126bd82611cd3565b91506126c883611cd3565b92508282019050808211156126e0576126df61256c565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127426026836120c0565b915061274d826126e6565b604082019050919050565b6000602082019050818103600083015261277181612735565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006127ae6020836120c0565b91506127b982612778565b602082019050919050565b600060208201905081810360008301526127dd816127a1565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612840602b836120c0565b915061284b826127e4565b604082019050919050565b6000602082019050818103600083015261286f81612833565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006128ac6010836120c0565b91506128b782612876565b602082019050919050565b600060208201905081810360008301526128db8161289f565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006129186014836120c0565b9150612923826128e2565b602082019050919050565b600060208201905081810360008301526129478161290b565b905091905056fea264697066735822122069153e03bfddfca32fc5f9aab8a421a7e0b6ef79dd75decc9bad792641acc13164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80638456cb59116100a0578063c3ce491d11610064578063c3ce491d14610343578063d8a531a61461036c578063d8befc4814610397578063f2fde38b146103d4578063f5dc7d56146103fd57610114565b80638456cb591461025e5780638da5cb5b1461027557806399b762ec146102a0578063b2526244146102dd578063c22a31011461030657610114565b8063485cc955116100e7578063485cc955146101995780635b8e99dc146101c25780635c975abb146101de578063715018a61461020957806381e19d311461022057610114565b806312a9abec1461011957806330027f3b146101425780633ccfd60b1461016b5780633f4ba83a14610182575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611a33565b610428565b005b34801561014e57600080fd5b5061016960048036038101906101649190611a33565b610474565b005b34801561017757600080fd5b5061018061053c565b005b34801561018e57600080fd5b506101976106da565b005b3480156101a557600080fd5b506101c060048036038101906101bb9190611a60565b6106ec565b005b6101dc60048036038101906101d79190611c0b565b610925565b005b3480156101ea57600080fd5b506101f3610cca565b6040516102009190611c82565b60405180910390f35b34801561021557600080fd5b5061021e610ce1565b005b34801561022c57600080fd5b5061024760048036038101906102429190611d09565b610cf5565b604051610255929190611dcf565b60405180910390f35b34801561026a57600080fd5b50610273610d5f565b005b34801561028157600080fd5b5061028a610d71565b6040516102979190611df8565b60405180910390f35b3480156102ac57600080fd5b506102c760048036038101906102c29190611e13565b610d9b565b6040516102d49190611e75565b60405180910390f35b3480156102e957600080fd5b5061030460048036038101906102ff9190611e90565b610dcd565b005b34801561031257600080fd5b5061032d60048036038101906103289190611ed0565b610e15565b60405161033a9190611e75565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190611efd565b610e2d565b005b34801561037857600080fd5b5061038161139f565b60405161038e9190611df8565b60405180910390f35b3480156103a357600080fd5b506103be60048036038101906103b99190611f59565b6113c5565b6040516103cb919061209e565b60405180910390f35b3480156103e057600080fd5b506103fb60048036038101906103f69190611a33565b6114d1565b005b34801561040957600080fd5b50610412611554565b60405161041f9190611df8565b60405180910390f35b61043061157a565b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61047c61157a565b8073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730760405160405180910390a380609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610544610d71565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105ca5750609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060090612143565b60405180910390fd5b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161065190612194565b60006040518083038185875af1925050503d806000811461068e576040519150601f19603f3d011682016040523d82523d6000602084013e610693565b606091505b50509050806106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce906121f5565b60405180910390fd5b50565b6106e261157a565b6106ea6115f8565b565b60008060019054906101000a900460ff1615905080801561071d5750600160008054906101000a900460ff1660ff16105b8061074a575061072c3061165b565b1580156107495750600160008054906101000a900460ff1660ff16145b5b610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090612287565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156107c6576001600060016101000a81548160ff0219169083151502179055505b6107ce61167e565b6107d66116d7565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c906122f3565b60405180910390fd5b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156109205760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109179190612365565b60405180910390a15b505050565b61092d611730565b816000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b815260040161098b91906123ee565b602060405180830381865afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190612425565b9050804210610a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a079061249e565b60405180910390fd5b6000848051906020012090506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26876040518263ffffffff1660e01b8152600401610a7991906123ee565b602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba91906124d3565b9050609a6000866002811115610ad357610ad2611d49565b5b6002811115610ae557610ae4611d49565b5b8152602001908152602001600020543414610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c9061254c565b60405180910390fd5b60006040518060400160405280876002811115610b5557610b54611d49565b5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815250905060986000848152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff02191690836002811115610bda57610bd9611d49565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506099600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000876002811115610c8d57610c8c611d49565b5b6002811115610c9f57610c9e611d49565b5b815260200190815260200160002060008154610cba9061259b565b9190508190555050505050505050565b6000606560009054906101000a900460ff16905090565b610ce961157a565b610cf3600061177a565b565b60986020528160005260406000208181548110610d1157600080fd5b90600052602060002001600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b610d6761157a565b610d6f611840565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609960205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b610dd561157a565b80609a6000846002811115610ded57610dec611d49565b5b6002811115610dff57610dfe611d49565b5b8152602001908152602001600020819055505050565b609a6020528060005260406000206000915090505481565b610e35611730565b816000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663920ffa26836040518263ffffffff1660e01b8152600401610e9391906123ee565b602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed491906124d3565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b9061262f565b60405180910390fd5b836000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305457b3d836040518263ffffffff1660e01b8152600401610fa291906123ee565b602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190612425565b9050804210611027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101e9061249e565b60405180910390fd5b6000868051906020012090506000339050600060028081111561104d5761104c611d49565b5b905060008167ffffffffffffffff81111561106b5761106a611abb565b5b6040519080825280602002602001820160405280156110995781602001602082028036833780820191505090505b50905060005b60986000868152602001908152602001600020805490508110156111e55760006098600087815260200190815260200160002082815481106110e4576110e361264f565b5b9060005260206000200190508473ffffffffffffffffffffffffffffffffffffffff168160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111d9578a8160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160000160009054906101000a900460ff1660028111156111af576111ae611d49565b5b815181106111c0576111bf61264f565b5b6020026020010180516111d29061259b565b9081815250505b8160010191505061109f565b5060005b828110156113925760008190508281815181106112095761120861264f565b5b60200260200101516099600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600281111561127657611275611d49565b5b600281111561128857611287611d49565b5b600281111561129a57611299611d49565b5b815260200190815260200160002060008282546112b7919061267e565b925050819055508281815181106112d1576112d061264f565b5b60200260200101516099600088815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083600281111561133e5761133d611d49565b5b60028111156113505761134f611d49565b5b600281111561136257611361611d49565b5b8152602001908152602001600020600082825461137f91906126b2565b92505081905550816001019150506111e9565b5050505050505050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008280519060200120905060986000828152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114c5578382906000526020600020016040518060400160405290816000820160009054906101000a900460ff16600281111561144a57611449611d49565b5b600281111561145c5761145b611d49565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611406565b50505050915050919050565b6114d961157a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153f90612758565b60405180910390fd5b6115518161177a565b50565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115826118a3565b73ffffffffffffffffffffffffffffffffffffffff166115a0610d71565b73ffffffffffffffffffffffffffffffffffffffff16146115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed906127c4565b60405180910390fd5b565b6116006118ab565b6000606560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116446118a3565b6040516116519190611df8565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c490612856565b60405180910390fd5b6116d56118f4565b565b600060019054906101000a900460ff16611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171d90612856565b60405180910390fd5b61172e611960565b565b611738610cca565b15611778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176f906128c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611848611730565b6001606560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861188c6118a3565b6040516118999190611df8565b60405180910390a1565b600033905090565b6118b3610cca565b6118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e99061292e565b60405180910390fd5b565b600060019054906101000a900460ff16611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193a90612856565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff166119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a690612856565b60405180910390fd5b6119bf6119ba6118a3565b61177a565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a00826119d5565b9050919050565b611a10816119f5565b8114611a1b57600080fd5b50565b600081359050611a2d81611a07565b92915050565b600060208284031215611a4957611a486119cb565b5b6000611a5784828501611a1e565b91505092915050565b60008060408385031215611a7757611a766119cb565b5b6000611a8585828601611a1e565b9250506020611a9685828601611a1e565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611af382611aaa565b810181811067ffffffffffffffff82111715611b1257611b11611abb565b5b80604052505050565b6000611b256119c1565b9050611b318282611aea565b919050565b600067ffffffffffffffff821115611b5157611b50611abb565b5b611b5a82611aaa565b9050602081019050919050565b82818337600083830152505050565b6000611b89611b8484611b36565b611b1b565b905082815260208101848484011115611ba557611ba4611aa5565b5b611bb0848285611b67565b509392505050565b600082601f830112611bcd57611bcc611aa0565b5b8135611bdd848260208601611b76565b91505092915050565b60038110611bf357600080fd5b50565b600081359050611c0581611be6565b92915050565b60008060408385031215611c2257611c216119cb565b5b600083013567ffffffffffffffff811115611c4057611c3f6119d0565b5b611c4c85828601611bb8565b9250506020611c5d85828601611bf6565b9150509250929050565b60008115159050919050565b611c7c81611c67565b82525050565b6000602082019050611c976000830184611c73565b92915050565b6000819050919050565b611cb081611c9d565b8114611cbb57600080fd5b50565b600081359050611ccd81611ca7565b92915050565b6000819050919050565b611ce681611cd3565b8114611cf157600080fd5b50565b600081359050611d0381611cdd565b92915050565b60008060408385031215611d2057611d1f6119cb565b5b6000611d2e85828601611cbe565b9250506020611d3f85828601611cf4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611d8957611d88611d49565b5b50565b6000819050611d9a82611d78565b919050565b6000611daa82611d8c565b9050919050565b611dba81611d9f565b82525050565b611dc9816119f5565b82525050565b6000604082019050611de46000830185611db1565b611df16020830184611dc0565b9392505050565b6000602082019050611e0d6000830184611dc0565b92915050565b600080600060608486031215611e2c57611e2b6119cb565b5b6000611e3a86828701611cbe565b9350506020611e4b86828701611a1e565b9250506040611e5c86828701611bf6565b9150509250925092565b611e6f81611cd3565b82525050565b6000602082019050611e8a6000830184611e66565b92915050565b60008060408385031215611ea757611ea66119cb565b5b6000611eb585828601611bf6565b9250506020611ec685828601611cf4565b9150509250929050565b600060208284031215611ee657611ee56119cb565b5b6000611ef484828501611bf6565b91505092915050565b60008060408385031215611f1457611f136119cb565b5b600083013567ffffffffffffffff811115611f3257611f316119d0565b5b611f3e85828601611bb8565b9250506020611f4f85828601611a1e565b9150509250929050565b600060208284031215611f6f57611f6e6119cb565b5b600082013567ffffffffffffffff811115611f8d57611f8c6119d0565b5b611f9984828501611bb8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611fd781611d9f565b82525050565b611fe6816119f5565b82525050565b6040820160008201516120026000850182611fce565b5060208201516120156020850182611fdd565b50505050565b60006120278383611fec565b60408301905092915050565b6000602082019050919050565b600061204b82611fa2565b6120558185611fad565b935061206083611fbe565b8060005b83811015612091578151612078888261201b565b975061208383612033565b925050600181019050612064565b5085935050505092915050565b600060208201905081810360008301526120b88184612040565b905092915050565b600082825260208201905092915050565b7f456d6f6a693a206d757374206265206f776e6572206f7220726576656e75652060008201527f6163636f756e7400000000000000000000000000000000000000000000000000602082015250565b600061212d6027836120c0565b9150612138826120d1565b604082019050919050565b6000602082019050818103600083015261215c81612120565b9050919050565b600081905092915050565b50565b600061217e600083612163565b91506121898261216e565b600082019050919050565b600061219f82612171565b9150819050919050565b7f456d6f6a693a206661696c656420746f20776974686472617700000000000000600082015250565b60006121df6019836120c0565b91506121ea826121a9565b602082019050919050565b6000602082019050818103600083015261220e816121d2565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612271602e836120c0565b915061227c82612215565b604082019050919050565b600060208201905081810360008301526122a081612264565b9050919050565b7f456d6f6a693a207a65726f206164647265737300000000000000000000000000600082015250565b60006122dd6013836120c0565b91506122e8826122a7565b602082019050919050565b6000602082019050818103600083015261230c816122d0565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061234f61234a61234584612313565b61232a565b61231d565b9050919050565b61235f81612334565b82525050565b600060208201905061237a6000830184612356565b92915050565b600081519050919050565b60005b838110156123a957808201518184015260208101905061238e565b60008484015250505050565b60006123c082612380565b6123ca81856120c0565b93506123da81856020860161238b565b6123e381611aaa565b840191505092915050565b6000602082019050818103600083015261240881846123b5565b905092915050565b60008151905061241f81611cdd565b92915050565b60006020828403121561243b5761243a6119cb565b5b600061244984828501612410565b91505092915050565b7f456d6f6a693a206578706972656420646f6d61696e0000000000000000000000600082015250565b60006124886015836120c0565b915061249382612452565b602082019050919050565b600060208201905081810360008301526124b78161247b565b9050919050565b6000815190506124cd81611a07565b92915050565b6000602082840312156124e9576124e86119cb565b5b60006124f7848285016124be565b91505092915050565b7f456d6f6a693a20696e636f7272656374207061796d656e740000000000000000600082015250565b60006125366018836120c0565b915061254182612500565b602082019050919050565b6000602082019050818103600083015261256581612529565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125a682611cd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d8576125d761256c565b5b600182019050919050565b7f456d6f6a693a206f6e6c79204443206f776e6572000000000000000000000000600082015250565b60006126196014836120c0565b9150612624826125e3565b602082019050919050565b600060208201905081810360008301526126488161260c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061268982611cd3565b915061269483611cd3565b92508282039050818111156126ac576126ab61256c565b5b92915050565b60006126bd82611cd3565b91506126c883611cd3565b92508282019050808211156126e0576126df61256c565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127426026836120c0565b915061274d826126e6565b604082019050919050565b6000602082019050818103600083015261277181612735565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006127ae6020836120c0565b91506127b982612778565b602082019050919050565b600060208201905081810360008301526127dd816127a1565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612840602b836120c0565b915061284b826127e4565b604082019050919050565b6000602082019050818103600083015261286f81612833565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006128ac6010836120c0565b91506128b782612876565b602082019050919050565b600060208201905081810360008301526128db8161289f565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006129186014836120c0565b9150612923826128e2565b602082019050919050565b600060208201905081810360008301526129478161290b565b905091905056fea264697066735822122069153e03bfddfca32fc5f9aab8a421a7e0b6ef79dd75decc9bad792641acc13164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addEmojiReaction(string,uint8)": {
        "params": {
          "_emojiType": "emoji type to add",
          "_name": "domain name to add the emoji reaction"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getEmojiReactions(string)": {
        "params": {
          "_name": "domain name to check"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDCAddress(address)": {
        "params": {
          "_dc": "DC contract address"
        }
      },
      "setEmojiReactionPrice(uint8,uint256)": {
        "params": {
          "_emojiType": "emoji type",
          "_price": "price for the emoji reaction addition"
        }
      },
      "setRevenueAccount(address)": {
        "params": {
          "_revenueAccount": "revenue account address"
        }
      },
      "transferEmojiReactions(string,address)": {
        "params": {
          "_name": "domain name to trasnfer the emoji reactions",
          "_receiver": "address to receive the emoji reactions"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Only owner of the revenue account can withdraw funds"
      }
    },
    "stateVariables": {
      "dc": {
        "details": "DC contract"
      },
      "emojiReactionCounters": {
        "details": "DC TokenId -> Owner -> EmojiType -> Emoji reaction counter"
      },
      "emojiReactionPrices": {
        "details": "Emoji Type -> Price"
      },
      "emojiReactions": {
        "details": "DC TokenId -> EmojiInfo list"
      },
      "revenueAccount": {
        "details": "Revenue account"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addEmojiReaction(string,uint8)": {
        "notice": "Add the emoji reaction"
      },
      "getEmojiReactions(string)": {
        "notice": "Returns all the emoji reactions added to the specific domain"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setDCAddress(address)": {
        "notice": "Set the DC contract address"
      },
      "setEmojiReactionPrice(uint8,uint256)": {
        "notice": "Set the price of each emoji reaction"
      },
      "setRevenueAccount(address)": {
        "notice": "Set the revenue account"
      },
      "transferEmojiReactions(string,address)": {
        "notice": "Transfer the emoji reactions to another address"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "withdraw()": {
        "notice": "Withdraw funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 775,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "dc",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 782,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "emojiReactions",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_array(t_struct(EmojiInfo)772_storage)dyn_storage)"
      },
      {
        "astId": 792,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "emojiReactionCounters",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_enum(EmojiType)766,t_uint256)))"
      },
      {
        "astId": 798,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "emojiReactionPrices",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_enum(EmojiType)766,t_uint256)"
      },
      {
        "astId": 801,
        "contract": "contracts/Emoji.sol:Emoji",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(EmojiInfo)772_storage)dyn_storage": {
        "base": "t_struct(EmojiInfo)772_storage",
        "encoding": "dynamic_array",
        "label": "struct Emoji.EmojiInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(EmojiType)766": {
        "encoding": "inplace",
        "label": "enum Emoji.EmojiType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_enum(EmojiType)766,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum Emoji.EmojiType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(EmojiType)766,t_uint256)"
      },
      "t_mapping(t_bytes32,t_array(t_struct(EmojiInfo)772_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Emoji.EmojiInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(EmojiInfo)772_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_enum(EmojiType)766,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(enum Emoji.EmojiType => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_enum(EmojiType)766,t_uint256))"
      },
      "t_mapping(t_enum(EmojiType)766,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(EmojiType)766",
        "label": "mapping(enum Emoji.EmojiType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EmojiInfo)772_storage": {
        "encoding": "inplace",
        "label": "struct Emoji.EmojiInfo",
        "members": [
          {
            "astId": 769,
            "contract": "contracts/Emoji.sol:Emoji",
            "label": "emojiType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EmojiType)766"
          },
          {
            "astId": 771,
            "contract": "contracts/Emoji.sol:Emoji",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}